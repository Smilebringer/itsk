Перем Кэш Экспорт;
Перем ТаблицаОшибок Экспорт;

#Область ПоискДанных

#Область ФункцииПоиска
// Возращает счет хозрасчетный по коду счета САП
// 
// Параметры:
// 	КодСчетаСАП 	- Строка 					- Код счета SAP
// 	ВалютаРасчетов 	- СправочникСсылка.Валюты 	- Используется только для счетов расчетов, для определения субсчета
// 	РасчетВУЕ 		- Булево 					- Используется только для счетов расчетов, для определения субсчета
// 	ВидАктвива 		- Строка 					- Предопределенные строки: "ТМЦ" или "Услуга". Используется только для 19 счета
//
// Возвращаемое значение:        
//	ПланСчетовСсылка.Хозрасчетный - Пустая ссылка, если не найдено
// 
Функция ПолучитьСчет1С(КодСчетаСАП, ВалютаРасчетов = Неопределено, РасчетВУЕ = Неопределено, ВидАктвива = Неопределено, НомерСтроки=0) 
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли;
	
	КэшСчетов = Кэш.СчетаБУ;
	
	Счет1С = КэшСчетов.Получить(КодСчетаСАП);
	
	Если Счет1С=Неопределено Тогда
		ДобавитьОшибку("Не найдено соответвие счета БУ счету SAP", Строка(КодСчетаСАП), НомерСтроки);
	ИначеЕсли ТипЗнч(Счет1С) = тип("ПланСчетовСсылка.Хозрасчетный") Тогда 	
		//Просто вернем счет
	ИначеЕсли ТипЗнч(Счет1С) = Тип("Структура") Тогда
		СоответвиеСубсчетам = Счет1С;
		Если ВидАктвива<>Неопределено Тогда
			Если СоответвиеСубсчетам.Свойство("ТМЦ") Тогда
				Если ВидАктвива="ТМЦ" Тогда
					Счет1С = СоответвиеСубсчетам.ТМЦ;
				Иначе 
					Счет1С = СоответвиеСубсчетам.Услуга;
				КонецЕсли; 
			Иначе 
				Счет1С = Неопределено;
				ДобавитьОшибку("Вызвана процедура поиска с указанием ВидАктива для счет, отличного от 19", Строка(КодСчетаСАП), НомерСтроки);				
			КонецЕсли; 
		ИначеЕсли ВалютаРасчетов <> Неопределено ИЛИ РасчетВУЕ = Неопределено Тогда
			Если СоответвиеСубсчетам.Свойство("Вал") Тогда
				Если РасчетВУЕ<>Неопределено И РасчетВУЕ = Истина Тогда
					Счет1С = СоответвиеСубсчетам.УЕ;
				ИначеЕсли ВалютаРасчетов = Кэш.ВалютаРегламентированногоУчета Тогда 
					Счет1С = СоответвиеСубсчетам.Руб;
				ИначеЕсли ВалютаРасчетов <> Кэш.ВалютаРегламентированногоУчета И ТипЗнч(ВалютаРасчетов)=тип("СправочникСсылка.Валюты")
					И ВалютаРасчетов<>ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
					Счет1С = СоответвиеСубсчетам.Вал;
				Иначе 
					Счет1С = Неопределено;
					ДобавитьОшибку("Счет БУ найден но не удалось уточнить субсчет, "+
						"возможно не был найден договор и поэтому неизвестны параметры расчетов (руб/вал/УЕ)", Строка(КодСчетаСАП), НомерСтроки);
				КонецЕсли; 
			Иначе 
				Счет1С = Неопределено;
				ДобавитьОшибку("Ошибка разработчика, при вызове поиск счета расчетов "+
					"не переданы доп. сведения по варианту расчетов (руб/вал/УЕ)", Строка(КодСчетаСАП), НомерСтроки);
			КонецЕсли;				
		КонецЕсли; 	
	КонецЕсли; 
	
	Счет1С = ?(Счет1С=Неопределено, ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"), Счет1С);
	Возврат Счет1С;
	
КонецФункции

//Пустая ссылка, если не найдено
Функция ПолучитьКотрагента(КодКонтрагентаСАП, НомерСтроки=0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КодКонтрагентаСАП = УдалитьПробелы(КодКонтрагентаСАП);
	Контрагент = Кэш.Контрагенты.Получить(КодКонтрагентаСАП);
	Если Контрагент=Неопределено Тогда
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие контрагента по коду SAP." , Строка(КодКонтрагентаСАП), НомерСтроки);
	КонецЕсли; 
	
	Возврат Контрагент;
	
КонецФункции

Функция ПолучитьДоговор(КодДоговораСАП, КодКонтрагентаСАП, НомерСтроки=0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	Контрагент = ПолучитьКотрагента(КодКонтрагентаСАП, НомерСтроки);
	КлючПоиска = УдалитьПробелы(КодДоговораСАП)+Строка(Контрагент.УникальныйИдентификатор());
	Договор = Кэш.Договоры.Получить(КлючПоиска);
	Если Договор = Неопределено Тогда
		Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		НаименованиеКонтрагента = ?(ЗначениеЗаполнено(Контрагент), Строка(Контрагент), "");
		ДобавитьОшибку("Не найдено соотвествие договора по коду SAP, принадлежащего контрагенту",
			"Код контрагента: "+КодКонтрагентаСАП+", Наименование: "+НаименованиеКонтрагента+", Код договора: "+КодДоговораСАП, НомерСтроки);
	КонецЕсли; 
	
	Возврат Договор;
	
КонецФункции

Функция ПолучитьДоговорРеквизиты(КодДоговораСАП, КодКонтрагентаСАП, НомерСтроки=0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	Контрагент = ПолучитьКотрагента(КодКонтрагентаСАП, НомерСтроки);
	КлючПоиска = УдалитьПробелы(КодДоговораСАП)+Строка(Контрагент.УникальныйИдентификатор());
	ДоговорСтруктура = Кэш.ДоговорыРеквизиты.Получить(КлючПоиска);
	Если ДоговорСтруктура = Неопределено Тогда
		НаименованиеКонтрагента = ?(ЗначениеЗаполнено(Контрагент), Строка(Контрагент), "");
		ДобавитьОшибку("Не найдено соотвествие договора по коду SAP, принадлежащего контрагенту",
			"Код контрагента: "+КодКонтрагентаСАП+", Наименование: "+НаименованиеКонтрагента+", Код договора: "+КодДоговораСАП, НомерСтроки);
	КонецЕсли; 
	
	Возврат ДоговорСтруктура;
	
КонецФункции

Функция ПолучитьФизЛицо(СНИЛС) 
		
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	ФизЛицо = Кэш.ФизЛица.Получить(СНИЛС);
	Если ФизЛицо = Неопределено Тогда
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соотвествие физ. лицу по СНИЛС", Строка(СНИЛС));
	КонецЕсли; 
	
	Возврат ФизЛицо;
	
КонецФункции  

Функция ПолучитьФизЛицоПоФИО(ФИО, НомерСтроки=0) 
		
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	ФИО = СокрЛП(ФИО);
	ФизЛицо = Кэш.ФизЛицоПоФИО.Получить(ФИО);
	Если ФизЛицо = Неопределено Тогда
		ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соотвествие физ. лицу по ФИО", Строка(ФИО), НомерСтроки);
	КонецЕсли; 
	
	Возврат ФизЛицо;
	
КонецФункции  

Функция ПолучитьБанк(СвифтБИК) 
		
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	Банк = Кэш.Банки.Получить(СвифтБИК);
	Если Банк = Неопределено Тогда
		Банк = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соотвествие банку по БИК/SWIFT", Строка(СвифтБИК));
	КонецЕсли; 
	
	Возврат Банк;
	
КонецФункции

Функция ПолучитьБанковскийСчет(НомерСчета, СвифтБИК) 
		
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КлючПоиска = НомерСчета + СвифтБИК;
	БанковскийСчет = Кэш.БанковскиеСчета.Получить(КлючПоиска);
	Если БанковскийСчет = Неопределено Тогда
		БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соотвествие банковскому счету по БИК/SWIFT и номеру счета",
			"БИК/SWIFT: "+СвифтБИК+", Номер счета: "+НомерСчета);
	КонецЕсли; 
	
	Возврат БанковскийСчет;
	
КонецФункции

Функция ПолучитьВалюту(КодВалюты, НомерСтроки=0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	Валюта = Кэш.Валюты.Получить(КодВалюты);
	Если Валюта=Неопределено Тогда
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие валюте по коду", Строка(КодВалюты), НомерСтроки);
	КонецЕсли; 
	
	Возврат Валюта;
	
КонецФункции

Функция ПолучитьСклад(Знач КодСклада, НомерСтроки)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КодСклада = УдалитьЛидируюшиеНули(КодСклада);
	Склад = Кэш.Склады.Получить(КодСклада);
	Если Склад=Неопределено Тогда
		Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие складу по коду", КодСклада, НомерСтроки);
	КонецЕсли; 
	
	Возврат Склад;
	
КонецФункции

Функция ПолучитьПодразделениеЦФО(НаименованиеЦФО, НомерСтроки = 0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	НаименованиеЦФО = Строка(НаименованиеЦФО);
	Подразделение = Кэш.ПодразделенияЦФО.Получить(НаименованиеЦФО);
	Если Подразделение=Неопределено Тогда
		Подразделение = ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие подразделению (справочник ""Подразделения"") по наименованию", Строка(НаименованиеЦФО), НомерСтроки);
	КонецЕсли; 
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьПодразделениеМВЗ(КодПодразделения)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	

	КодПодразделения = УдалитьЛидируюшиеНули(КодПодразделения);
	КодПодразделения = УдалитьПробелы(КодПодразделения);
	Подразделение = Кэш.ПодразделенияМВЗ.Получить(КодПодразделения);
	Если Подразделение=Неопределено Тогда
		Подразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие подразделению (справочник ""Подразделения организаций"") по коду", Строка(КодПодразделения));
	КонецЕсли; 
	
	Возврат Подразделение;
	
КонецФункции

Функция ПолучитьНоменклатуру(Знач КодНоменклатуры, НомерСтроки = 0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КодНоменклатуры = ПривестиКодНоменклатуры(КодНоменклатуры);
	Номенклатура = Кэш.Номенклатура.Получить(КодНоменклатуры);
	Если Номенклатура=Неопределено Тогда
		Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие номенклатуре по коду", КодНоменклатуры, НомерСтроки);
	КонецЕсли; 
	
	Возврат Номенклатура;
	
КонецФункции

Функция ПолучитьНоменклатуруПоМэппингуРС(Знач КодНоменклатуры, НомерСтроки = 0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КодНоменклатуры = УдалитьПробелы(КодНоменклатуры);
	Номенклатура = Кэш.НоменклатураМэппингРС.Получить(КодНоменклатуры);
	Если Номенклатура=Неопределено Тогда
		Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие номенклатуре по мэппингу из РС «Соответствие объектов для внешних источников данных»", КодНоменклатуры, НомерСтроки);
	КонецЕсли; 
	
	Возврат Номенклатура;
	
КонецФункции


Функция ПолучитьЕдИзмерения(Знач НаименованиеЕдИз, НомерСтроки=0)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	НаименованиеЕдИз = НРег(СокрЛП(НаименованиеЕдИз));
	ЕдИзмерения = Кэш.ЕдИзмерения.Получить(НаименованиеЕдИз);
	Если ЕдИзмерения=Неопределено Тогда
		ЕдИзмерения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие ед. измерения по наименованию", НаименованиеЕдИз, НомерСтроки);
	КонецЕсли; 
	
	Возврат ЕдИзмерения;
	
КонецФункции

Функция ПолучитьНоменклатурнуюГруппу(КодНоменклатурнойГруппы)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	НомГруппа = Кэш.НоменклатурныеГруппы.Получить(КодНоменклатурнойГруппы);
	Если НомГруппа=Неопределено Тогда
		НомГруппа = ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка");
		ДобавитьОшибку("Поиск номенклатурной группы",
			"Не найдено соответвие ном. группе по коду ("+КодНоменклатурнойГруппы+")");
	КонецЕсли; 
	
	Возврат НомГруппа;
	
КонецФункции

Функция ПолучитьПроект(КодПроекта)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	Проект = Кэш.Проекты.Получить(КодПроекта);
	Если Проект=Неопределено Тогда
		Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		ДобавитьОшибку("Поиск проекта",
			"Не найдено соответвие проекту по коду ("+КодПроекта+")");
	КонецЕсли; 
	
	Возврат Проект;
	
КонецФункции

Функция ПолучитьОбъектУправления(КодОбъектаУправления)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	ОбУправления = Кэш.ОбъектыУправления.Получить(КодОбъектаУправления);
	Если ОбУправления=Неопределено Тогда
		ОбУправления = ПредопределенноеЗначение("Справочник.ГПН_ОбъектыУправления.ПустаяСсылка");
		ДобавитьОшибку("Поиск объекта управления",
			"Не найдено соответвие об. управления по коду ("+КодОбъектаУправления+")");
	КонецЕсли; 
	
	Возврат ОбУправления;
	
КонецФункции

Функция ПолучитьВидыРеализации(КодВидаРеализации)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	ВидРеализации = Кэш.ВидыРеализации.Получить(КодВидаРеализации);
	Если ВидРеализации=Неопределено Тогда
		ВидРеализации = ПредопределенноеЗначение("Справочник.ГПН_ВидыРеализации.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие виду реализации по коду", КодВидаРеализации);
	КонецЕсли; 
	
	Возврат ВидРеализации;
	
КонецФункции

Функция ПолучитьКаналПродаж(КодКаналаПродаж)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КаналПродаж = Кэш.КаналыПродаж.Получить(КодКаналаПродаж);
	Если КаналПродаж=Неопределено Тогда
		КаналПродаж = ПредопределенноеЗначение("Справочник.ГПН_КаналыПродаж.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие каналу продаж по коду", КодКаналаПродаж);
	КонецЕсли; 
	
	Возврат КаналПродаж;
	
КонецФункции

Функция ПолучитьСтрану(КодСтраны)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	Страна = Кэш.Страны.Получить(КодСтраны);
	Если Страна=Неопределено Тогда
		Страна = ПредопределенноеЗначение("Справочник.КлассификаторСтранМира.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие стране по коду", КодСтраны);
	КонецЕсли; 
	
	Возврат Страна;
	
КонецФункции

Функция ПолучитьОКОФ(КодОКОФ)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	ОКОФ = Кэш.ОКОФ.Получить(КодОКОФ);
	Если ОКОФ=Неопределено Тогда
		ОКОФ = ПредопределенноеЗначение("Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие ОКОФ по наименованию", КодОКОФ);
	КонецЕсли; 
	
	Возврат ОКОФ;
	
КонецФункции

Функция ПолучитьСтатьюЗатрат(КодСтатьиЗатрат)
	
	Если Кэш=Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не инициализирован кэш данных'"); 
	КонецЕсли; 
	
	КодСтатьиЗатрат = УдалитьПробелы(КодСтатьиЗатрат);
	СтатьяЗатрат = Кэш.СтатьиЗатрат.Получить(КодСтатьиЗатрат);
	Если СтатьяЗатрат=Неопределено Тогда
		СтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие статье затрат по коду", КодСтатьиЗатрат);
	КонецЕсли; 
	
	Возврат СтатьяЗатрат;
	
КонецФункции

Функция ПолучитьВидРБПМСФО(НаименованиеВидаРБПМСФО, НомерСтроки) 
		
	Если НЕ Кэш.Свойство("ВидыРБПМСФО")Тогда
		
		Кэш.Вставить("ВидыРБПМСФО", Новый Соответствие);
		Запрос = Новый Запрос;
				
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГПН_ВидыРБП_МСФО.Наименование,
		|	ГПН_ВидыРБП_МСФО.Ссылка
		|ИЗ
		|	Справочник.ГПН_ВидыРБП_МСФО КАК ГПН_ВидыРБП_МСФО";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Кэш.ВидыРБПМСФО.Вставить(СокрЛП(Выборка.Наименование), Выборка.Ссылка);		
		КонецЦикла; 
	КонецЕсли; 
	
	ВидРБПМСФО = Кэш.ВидыРБПМСФО.Получить(СокрЛП(НаименованиеВидаРБПМСФО));
	Если ВидРБПМСФО=Неопределено Тогда
		ВидРБПМСФО = ПредопределенноеЗначение("Справочник.ГПН_ВидыРБП_МСФО.ПустаяСсылка");
		ДобавитьОшибку("Не найдено соответвие Виду РБП МСФО по наименованию", НаименованиеВидаРБПМСФО, НомерСтроки);
	КонецЕсли; 
	
	Возврат ВидРБПМСФО;
	
КонецФункции
 

//
//
Функция ПолучитьСоздатьДокументРасчетов(ПараметрыДокРасчетов) 
	
	Если ПараметрыДокРасчетов.ГПН_КодSAP="" Тогда
		ДобавитьОшибку("Не указан код SAP документа расчетов в строке файла", "Номер строки: "+ПараметрыДокРасчетов.НомерСтрокиФайла);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("ДокРасчетовКодСАП", 			ПараметрыДокРасчетов.ГПН_КодSAP);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 			ПараметрыДокРасчетов.Дата);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	ПараметрыДокРасчетов.НомерВходящегоДокумента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Ссылка КАК ДокРасчетов,
	|	ДокументРасчетовСКонтрагентом.Ссылка КАК СФ,
	|	ДокументРасчетовСКонтрагентом.ГПН_КодSAP КАК ДокРасчетовКодСАП,
	|	ДокументРасчетовСКонтрагентом.ГПН_КодSAP КАК СФКодСАП
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.ГПН_КодSAP = &ДокРасчетовКодСАП
	|	И ДокументРасчетовСКонтрагентом.ПометкаУдаления = ЛОЖЬ
	|	И ДокументРасчетовСКонтрагентом.НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И ДокументРасчетовСКонтрагентом.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	РеализацияТоваровУслуг.ГПН_КодSAP,
	|	ЕСТЬNULL(СчетФактураВыданныйДокументыОснования.Ссылка.ГПН_КодSAP, """")
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО (СчетФактураВыданныйДокументыОснования.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
	|			И (СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	РеализацияТоваровУслуг.ГПН_КодSAP = &ДокРасчетовКодСАП
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеПоступленияТоваровИУслугНДС.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	ОтражениеПоступленияТоваровИУслугНДС.ГПН_КодSAP,
	|	ЕСТЬNULL(СчетФактураПолученныйДокументыОснования.Ссылка.ГПН_КодSAP, """")
	|ИЗ
	|	Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ОтражениеПоступленияТоваровИУслугНДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО (СчетФактураПолученныйДокументыОснования.ДокументОснование = ОтражениеПоступленияТоваровИУслугНДС.Ссылка)
	|			И (СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ОтражениеПоступленияТоваровИУслугНДС.ГПН_КодSAP = &ДокРасчетовКодСАП
	|	И ОтражениеПоступленияТоваровИУслугНДС.ПометкаУдаления = ЛОЖЬ
	|	И ОтражениеПоступленияТоваровИУслугНДС.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И ОтражениеПоступленияТоваровИУслугНДС.НомерВходящегоДокумента = &НомерВходящегоДокумента";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(); 
	
	Если Выборка.Количество()>1 Тогда
		ОписаниеОшибки = "Найдено более одного документа расчетов или несколько СФ по коду SAP ("+ПараметрыДокРасчетов.ГПН_КодSAP+")";
		Пока Выборка.Следующий() Цикл
			ДобавитьОшибку(ОписаниеОшибки, "Документ расчетов: "+Выборка.ДокРасчетов + ", СФ: "+Выборка.СФ);	
		КонецЦикла;
		Возврат ПредопределенноеЗначение("Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка");
	ИначеЕсли Выборка.Количество()=1 Тогда
		Выборка.Следующий();
		
		ДокРасчетов = Выборка.ДокРасчетов;
		Если ТипЗнч(ДокРасчетов)=Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда
			ДокРасчетов = СоздатьОбновитьДокРасчетов(ПараметрыДокРасчетов, ДокРасчетов); 
		КонецЕсли; 
		
		Возврат ДокРасчетов;
	Иначе 
		Возврат СоздатьОбновитьДокРасчетов(ПараметрыДокРасчетов);
	КонецЕсли; 
	
КонецФункции

//
//
Функция СоздатьОбновитьДокРасчетов(ПараметрыДокРасчетов, СсылкаНаСущДокумент = Неопределено) 
	
	Если СсылкаНаСущДокумент=Неопределено Тогда
		ДокРасчетовОб = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	Иначе 
		ДокРасчетовОб = СсылкаНаСущДокумент.ПолучитьОбъект();
	КонецЕсли; 
	ЗаполнитьЗначенияСвойств(ДокРасчетовОб,ПараметрыДокРасчетов);
	Попытка
		ДокРасчетовОб.Записать();
		Возврат ДокРасчетовОб.Ссылка;
	Исключение
		ДобавитьОшибку("Не удалость записать документ расчетов", ОписаниеОшибки());
		Возврат ПредопределенноеЗначение("Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка");
	КонецПопытки; 
			
КонецФункции
 
#КонецОбласти 

#Область ИнициализацияДанных

//
//
Процедура ИнициализацияКэша() Экспорт
		
	ИнициализацияКэшаДанныхВБазе();
	ИнициализацияКэшаСоответвияСчетов(ПутьКФайлуСчетов);
	
КонецПроцедуры
 
//
//
Процедура ИнициализацияКэшаДанныхВБазе() 
	Запрос = Новый Запрос;
	
	ИменаТаблиц = Новый СписокЗначений;
	Префикс = "Типовой_"; //Справочники которые будут получены по коду
	ТекстЗапроса = 	ТекстЗапросаВалюты(					ИменаТаблиц, "Валюты") + 
 					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"СтатьиЗатрат",		"СтатьиЗатрат") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"Номенклатура",		"Номенклатура") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"Склады", 				"Склады") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"ПодразделенияМВЗ", 	"ПодразделенияОрганизаций") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"ОС", 					"ОсновныеСредства") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"НоменклатурныеГруппы","НоменклатурныеГруппы") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"Проекты", 			"Проекты") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"ОбъектыУправления", 	"ГПН_ОбъектыУправления") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"ВидыРеализации", 		"ГПН_ВидыРеализации") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"КаналыПродаж", 		"ГПН_КаналыПродаж") + 
					ТекстЗапросаСправочника(			ИменаТаблиц, Префикс+"Страны", 				"КлассификаторСтранМира") +
					ТекстЗапросаОКОФ(					ИменаТаблиц, Префикс+"ОКОФ") + 
					ТекстЗапросаЦФО(					ИменаТаблиц, Префикс+"ПодразделенияЦФО") + 
					ТекстЗапросаНоменклатураМэппингРС(	ИменаТаблиц, Префикс+"НоменклатураМэппингРС") + 
					ТекстЕдиницИзмерения(				ИменаТаблиц, "ЕдИзмерения") +					
					ТекстЗапросаКонтрагенты(			ИменаТаблиц, "Контрагенты") +
					ТекстЗапросаДоговоры(				ИменаТаблиц, "Договоры") +
					ТекстЗапросаФизЛица(				ИменаТаблиц, "ФизЛица") + 
					ТекстЗапросаБанки(					ИменаТаблиц, "Банки") +
					ТекстЗапросаБанковскиеСчета(		ИменаТаблиц, "БанковскиеСчета") +
					ТекстЗапросаДокументыРасчетов(		ИменаТаблиц, "ДокРасчетов"); 
			
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ТипЗнч(Кэш)<>Тип("Структура") Тогда
		Кэш = Новый Структура; 		
	КонецЕсли;
	
	Для каждого Таблицы Из ИменаТаблиц Цикл
		ИмяКэша = Таблицы.Представление;
		Если Лев(ИмяКэша, СтрДлина(Префикс)) = Префикс Тогда
			
			ИмяКэша = Сред(ИмяКэша, СтрДлина(Префикс)+1);
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ИмяКэша = "НоменклатураМэппингРС" ИЛИ ИмяКэша = "Номенклатура" Тогда
					КодВ1С = Выборка.Код;
				Иначе
					КодВ1С = УдалитьЛидируюшиеНули(Выборка.Код);					
				КонецЕсли; 
				ТекущийКэш.Вставить(КодВ1С, Выборка.Ссылка);
			КонецЦикла; 
		ИначеЕсли ИмяКэша = "Валюты" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущийКэш.Вставить(Выборка.Наименование, Выборка.Ссылка);
			КонецЦикла; 				
		ИначеЕсли ИмяКэша = "ФизЛица" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			Кэш.Вставить("ФизЛицоПоФИО", Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущийКэш.Вставить(Выборка.СтраховойНомерПФР, Выборка.Ссылка);
				Кэш.ФизЛицоПоФИО.Вставить(Выборка.Наименование, Выборка.Ссылка);
			КонецЦикла; 				
		ИначеЕсли ИмяКэша = "Банки" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущийКэш.Вставить(Выборка.СвифтБИК, Выборка.Ссылка);
			КонецЦикла; 				
		ИначеЕсли ИмяКэша = "Контрагенты" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекущийКэш.Вставить(Выборка.КодСАП, Выборка.Ссылка);
			КонецЦикла; 				
		ИначеЕсли ИмяКэша = "Договоры" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие);
			ТекущийКэш = Кэш[ИмяКэша];
			//2 версия кэша
			Кэш.Вставить("ДоговорыРеквизиты", Новый Соответствие);
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				Попытка
					КлючПоиска = Строка(Выборка.КодСАП)+Строка(Выборка.Контрагент.УникальныйИдентификатор());
				Исключение
				    ОписаниеОшибки = ОписаниеОшибки();
					ОписаниеОшибки = ОписаниеОшибки+Символы.ПС + "Тип кода САП: " + ТипЗнч(Выборка.КодСАП);
					ОписаниеОшибки = ОписаниеОшибки+Символы.ПС + "Тип владельца: " + ТипЗнч(Выборка.Контрагент);
					
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.УстановитьСтроку();
					ЗАписьXML.ЗаписатьОбъявлениеXML();
					ОшибочныйОбъект = Выборка.Ссылка.ПолучитьОбъект();
					СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОшибочныйОбъект, НазначениеТипаXML.Неявное);
					ОписаниеОшибки = ОписаниеОшибки + символы.ПС + символы.ПС + ЗАписьXML.Закрыть(); 
					ДобавитьОшибку("Ошибки программы", ОписаниеОшибки);
					Прервать;
				КонецПопытки; 
				
				ТекущийКэш.Вставить(КлючПоиска, Выборка.Ссылка);
				
				//2 версия кэша
				ДанныеДоговора = Новый Структура("Ссылка, Валюта, РасчетыВУЕ");
				ЗаполнитьЗначенияСвойств(ДанныеДоговора,Выборка);
				Кэш.ДоговорыРеквизиты.Вставить(КлючПоиска, ДанныеДоговора);
				
			КонецЦикла; 				
		ИначеЕсли ИмяКэша = "БанковскиеСчета" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				КлючПоиска = Выборка.НомерСчета+Выборка.СвифтБИК;
				ТекущийКэш.Вставить(КлючПоиска, Выборка.Ссылка);
			КонецЦикла; 				
		ИначеЕсли ИмяКэша = "ЕдИзмерения" Тогда
			Кэш.Вставить(ИмяКэша, Новый Соответствие); 
			ТекущийКэш = Кэш[ИмяКэша];
			Выборка = РезультатЗапроса[ИменаТаблиц.Индекс(Таблицы)].Выбрать();
			Пока Выборка.Следующий() Цикл
				КлючПоиска = Нрег(СокрЛП(Выборка.Наименование));
				ТекущийКэш.Вставить(КлючПоиска, Выборка.Ссылка);
			КонецЦикла; 				
		КонецЕсли; 	
	КонецЦикла;
	
	ПостОбработкаТаблицыОшибок();
	
КонецПроцедуры

Процедура ИнициализацияКэшаСоответвияСчетов(ИмяФайлаСоотвествия) 
	
	
	НомерСтраницы = 2;
	МаксимальнаяКолонка = 4;
	НачальнаяСтрока = 3;
		
    ТаблицаExcel = ЗагрузитьМетодом_MSEXCEL(ИмяФайлаСоотвествия, 2, 0, НачальнаяСтрока, 0, 0);	
	РезультатЧтения = ТаблицаExcel.Скопировать(,"N2, N4");										   
	
	РезультатЧтения.Колонки.N2.Имя = "КодСАП"; 
	РезультатЧтения.Колонки.N4.Имя = "Код1С"; 
	
	Если ТипЗнч(Кэш)<>Тип("Структура") Тогда
		Кэш = Новый Структура; 		
	КонецЕсли;
	Кэш.Вставить("СчетаБУ", Новый Соответствие);
	КэшСчетов = Кэш.СчетаБУ;
	
    СчетПоКоду = ПолучитьСчетаПоКоду();
	Для каждого СтрокаТЗ Из РезультатЧтения Цикл
		Код1С = УдалитьПробелы(СтрокаТЗ.Код1С);
		КодСАП = УдалитьПробелы(СтрокаТЗ.КодСАП);
		
		Если Найти(Код1С, ",")=0 Тогда
			Счет1с = СчетПоКоду.Получить(Код1С);
			Если Счет1с<>Неопределено Тогда
				КэшСчетов.Вставить(КодСАП, Счет1с);
			Иначе 
				ДобавитьОшибку("Не найден счет БУ по коду при инициализации соответствия", Строка(Код1С));
			КонецЕсли; 
		Иначе 			
			МассивКодов1С = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Код1С);
			
			//Разбор вариантов 19 счета
			Если Найти(Код1С, "19") Тогда
				СоответвиеКодам1с = Новый Структура("Услуга, ТМЦ");
				Для каждого Код1СВложенный Из МассивКодов1С Цикл
					Код1СВложенный = СокрЛП(Код1СВложенный);
					Счет1с = СчетПоКоду.Получить(Код1СВложенный);
					Если Счет1с<>Неопределено Тогда
						Если ЭтоСчетНДС_ТМЦ(Код1СВложенный) Тогда
							СоответвиеКодам1с.ТМЦ = Счет1с;
						ИначеЕсли ЭтоСчетНДС_Услуга(Код1СВложенный) Тогда
							СоответвиеКодам1с.Услуга = Счет1с;
						Иначе 
							ДобавитьОшибку("Инициализация соответвие счетов",
								"Не удалось определить принадлежность к виду актива НДС (Услуга или ТМЦ). Код счета: """+Код1СВложенный+"""");
						КонецЕсли; 	
					Иначе 
						ДобавитьОшибку("Инициализация соответвие счетов", "Не найден счет БУ по коду "+Код1С);
					КонецЕсли; 
				КонецЦикла; 
			//Конец Разбор вариантов 19 счета
			Иначе 
			    СоответвиеКодам1с = Новый Структура("Руб, Вал, УЕ");
				Для каждого Код1СВложенный Из МассивКодов1С Цикл
					Код1СВложенный = СокрЛП(Код1СВложенный);
					Счет1с = СчетПоКоду.Получить(Код1СВложенный);
					Если Счет1с<>Неопределено Тогда
						Если ЭтоСчетРасчетовВРублях(Код1СВложенный) Тогда
							СоответвиеКодам1с.Руб = Счет1с;
						ИначеЕсли ЭтоСчетРасчетовВал(Код1СВложенный) Тогда
							СоответвиеКодам1с.Вал = Счет1с;
						ИначеЕсли ЭтоСчетРасчетовУЕ(Код1СВложенный) Тогда
							СоответвиеКодам1с.УЕ = Счет1с;
						Иначе 
							ДобавитьОшибку("Инициализация соответвие счетов",
								"Не удалось определить принадлежность счета расчетов к субсчету (Вал, УЕ или руб.) Код счета: """+Код1СВложенный+"""");
						КонецЕсли; 	
					Иначе 
						ДобавитьОшибку("Инициализация соответвие счетов", "Не найден счет БУ по коду """+Код1С+"""");
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			
			КэшСчетов.Вставить(КодСАП, СоответвиеКодам1с);				
			
		КонецЕсли; 
	КонецЦикла; 
	
	Кэш.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());	
	
	ПостОбработкаТаблицыОшибок();
	
КонецПроцедуры

Функция ПолучитьСчетаПоКоду() 
	
	Результат = Новый Соответствие; 
	
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Код,
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Код, Выборка.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСправочника(ИменаТаблиц, ИмяТаблицы, ИмяСправочника) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Справочник.Код,
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+"  КАК Справочник
	|ГДЕ
	|	Справочник.ПометкаУдаления = ЛОЖЬ";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

//
//
Функция ТекстЗапросаВалюты(ИменаТаблиц, ИмяТаблицы) 
		
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Валюты.Наименование,
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты";

	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции
 

Функция ТекстЗапросаБанки(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Банки.СвифтБИК,
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки";

	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонтрагенты(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.ГПН_КодКонтрагента КАК КодСАП,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДоговоры(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ГПН_КодSAP КАК КодСАП,
	|	ДоговорыКонтрагентов.Ссылка,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.Владелец, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУЕ
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаБанковскиеСчета(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.НомерСчета,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.СвифтБИК, """") КАК СвифтБИК,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.Ссылка, ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)) КАК Банк
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаФизЛица(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОКОФ(ИменаТаблиц, ИмяТаблицы) 
		
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбщероссийскийКлассификаторОсновныхФондов.Наименование КАК Код,
	|	ОбщероссийскийКлассификаторОсновныхФондов.Ссылка
	|ИЗ
	|	Справочник.ОбщероссийскийКлассификаторОсновныхФондов КАК ОбщероссийскийКлассификаторОсновныхФондов";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции
                            
Функция ТекстЗапросаДокументыРасчетов(ИменаТаблиц, ИмяТаблицы) 
		
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЦФО(ИменаТаблиц, ИмяТаблицы) 
		
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Подразделения.Наименование КАК Код,
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНоменклатураМэппингРС(ИменаТаблиц, ИмяТаблицы) 
		
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Соответствие.Код КАК Код,
	|	Соответствие.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.ГПН_СоответствияОбъектовДляВнешнихИсточниковДанных.СрезПоследних КАК Соответствие
	|ГДЕ
	|	Соответствие.Объект ССЫЛКА Справочник.Номенклатура";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЕдиницИзмерения(ИменаТаблиц, ИмяТаблицы) 
		
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Наименование,
	|	КлассификаторЕдиницИзмерения.Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|ГДЕ
	|	КлассификаторЕдиницИзмерения.ПометкаУдаления = ЛОЖЬ";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции


#Область НеИспользуется

Функция ТекстЗапросаНоменклатурныеГруппы(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НоменклатурныеГруппы.Код,
	|	НоменклатурныеГруппы.Ссылка
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПроекты(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Проекты.Код,
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбъектыУправления(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГПН_ОбъектыУправления.Код,
	|	ГПН_ОбъектыУправления.Ссылка
	|ИЗ
	|	Справочник.ГПН_ОбъектыУправления КАК ГПН_ОбъектыУправления";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВидыРеализации(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГПН_ВидыРеализации.Код,
	|	ГПН_ВидыРеализации.Ссылка
	|ИЗ
	|	Справочник.ГПН_ВидыРеализации КАК ГПН_ВидыРеализации";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКаналыПродаж(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГПН_КаналыПродаж.Код,
	|	ГПН_КаналыПродаж.Ссылка
	|ИЗ
	|	Справочник.ГПН_КаналыПродаж КАК ГПН_КаналыПродаж";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодразделенияЦФО(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Подразделения.Наименование КАК Код,
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодразделенияМВЗ(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Код,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНоменклатура(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Номенклатура.Код,
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЕдиницыИзмерения(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлассификаторЕдиницИзмерения.Код,
	|	КлассификаторЕдиницИзмерения.Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСклады(ИменаТаблиц, ИмяТаблицы) 
	
	ИменаТаблиц.Добавить(ИменаТаблиц.Количество(), ИмяТаблицы);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Склады.Код,
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады";
	
	ТекстЗапроса = ТекстЗапроса + ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#Область ЗагрузкаДанных

//
//
Процедура ЗагрузитьДанные(КонтекстЗагрузки, ДанныеФайла) Экспорт 
	
	ЗагруженныеДокументы.Очистить();
	ИмяШаблона = КонтекстЗагрузки.ШаблонЗагрузки;
	
	Если ИмяШаблона="Взаиморасчеты_РасчетыСПокупателями"
		ИЛИ ИмяШаблона="Взаиморасчеты_АвансыПолученные"
		ИЛИ ИмяШаблона="Взаиморасчеты_РасчетыСПоставщиками"
		ИЛИ ИмяШаблона="Взаиморасчеты_АвансыВыданные"
		ИЛИ ИмяШаблона="Взаиморасчеты_ПрочиеРасчеты" Тогда
		ЗагрузкаДанныхПоРасчетам(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="Взаиморасчеты_РасчетыСПодотчетниками" Тогда
		ЗагрузитьРасчетыСПодотчетниками(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="Взаиморасчеты_РасчетыПоРезервам" Тогда
		ЗагрузитьРасчетыПоРезервам(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="НеоборотныеАктивы_ОсновныеСредства" Тогда
		ЗагрузитьОсновныеСредства(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="НеоборотныеАктивы_НМА" Тогда
		ЗагрузитьНМА(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="НеоборотныеАктивы_РПБ" Тогда
		ЗагрузитьРБП(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="МПЗ_Товары" ИЛИ ИмяШаблона="МПЗ_Материалы" Тогда
		ЗагрузитьТовары(КонтекстЗагрузки, ДанныеФайла);
	Иначе 
		ВызватьИсключение НСтр("ru = 'Не найден шаблон для загрузки'"); 
	КонецЕсли;
	
	ПостОбработкаТаблицыОшибок();
КонецПроцедуры

Функция КонтекстЗагрузки() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТолькоПроверка", Ложь);
	Параметры.Вставить("ТолькоПоиск", Ложь);
	Параметры.Вставить("ШаблонЗагрузки", "");
	Параметры.Вставить("ПредставлениеШаблона", "");
	Параметры.Вставить("ИмяФайла", "");
	Параметры.Вставить("СтрокаЗаголовков", 0);
	Параметры.Вставить("НомерСтраницы", 0);
	Параметры.Вставить("НачальнаяСтрока", 0);
	Параметры.Вставить("КонечнаяСтрока", 0);
	Параметры.Вставить("СоответствиеКолонок", Новый СписокЗначений);
	Параметры.Вставить("ПостоянныеДанные", Новый Структура); //ключ - имя реквизита, значение - значение реквизита
	
	Возврат Параметры;
	
КонецФункции
 
Процедура ЗагрузитьКонтрагентов(КонтекстЗагрузки) 
	
	ТаблицаДанных = ПолучитьТаблицуДанных(КонтекстЗагрузки);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		КодСАП = УдалитьПробелы(СтрокаТаблицы.КодСАП);
		//КодСАП = УдалитьЛидируюшиеНули(КодСАП);
		ПолучитьКотрагента(КодСАП);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоискИСозданиеСправочников(КонтекстЗагрузки, ДанныеФайла) Экспорт
	
	ИмяШаблона = КонтекстЗагрузки.ШаблонЗагрузки;
	
	Если ИмяШаблона="Взаиморасчеты_РасчетыСПокупателями" 
		ИЛИ ИмяШаблона="Взаиморасчеты_АвансыПолученные" 
		ИЛИ ИмяШаблона="Взаиморасчеты_РасчетыСПоставщиками" 
		ИЛИ ИмяШаблона="Взаиморасчеты_АвансыВыданные" 
		ИЛИ ИмяШаблона="Взаиморасчеты_ПрочиеРасчеты" Тогда
		ПоискИСозданиеСправочников_Взаиморасчеты(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="НеоборотныеАктивы_ОсновныеСредства" Тогда	
		ПоискИСозданиеСправочников_ОС(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="НеоборотныеАктивы_НМА" Тогда	
		ПоискИСозданиеСправочников_НМА(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="НеоборотныеАктивы_РПБ" Тогда	
		ПоискИСозданиеСправочников_РБП(КонтекстЗагрузки, ДанныеФайла);
	ИначеЕсли ИмяШаблона="МПЗ_Товары" ИЛИ ИмяШаблона="МПЗ_Материалы" Тогда	
		ПоискИСозданиеСправочников_Товары(КонтекстЗагрузки, ДанныеФайла);
	Иначе 
		ВызватьИсключение НСтр("ru = 'Не найден шаблон для загрузки'"); 
	КонецЕсли;
	
КонецПроцедуры
 
//Взаиморасчеты

//
//
Процедура ПоискИСозданиеСправочников_Взаиморасчеты(КонтекстЗагрузки, ДанныеФайла) 
	
	ДополнитьТаблицуКолонками_Взаиморасчеты(ДанныеФайла);
		
	ЕстьКодКонтрагента 	= ДанныеФайла.Колонки.Найти("ДанныеФайла_КодКонтрагентаСАП") <> Неопределено;
	ЕстьКодДоговора 	= ДанныеФайла.Колонки.Найти("ДанныеФайла_КодДоговораСАП") <> Неопределено;
	ЕстьКодСчетаБУ		= ДанныеФайла.Колонки.Найти("ДанныеФайла_КодСчетаСАП") <> Неопределено;
	ЕстьСНИЛСФизЛица 	= ДанныеФайла.Колонки.Найти("ДанныеФайла_СНИЛСФизЛица") <> Неопределено;
	
	Для каждого СтрокаТаблицы Из ДанныеФайла Цикл 
		Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Если ЕстьКодКонтрагента Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_Контрагент) Тогда
				КодКонтрагентаСАП = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_КодКонтрагентаСАП);		
				//КодКонтрагентаСАП = УдалитьЛидируюшиеНули(КодКонтрагентаСАП);
				Контрагент = ПолучитьКотрагента(КодКонтрагентаСАП, СтрокаТаблицы.НомерСтроки);
				СтрокаТаблицы.ДанныеБазы_Контрагент = Контрагент;
			КонецЕсли; 
		КонецЕсли; 
		
		Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Если ЕстьКодДоговора Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_Договор) Тогда
				КодДоговораСАП = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_КодДоговораСАП);
				Договор = ПолучитьДоговорРеквизиты(КодДоговораСАП, КодКонтрагентаСАП, СтрокаТаблицы.НомерСтроки);
				СтрокаТаблицы.ДанныеБазы_Договор = ?(Договор=Неопределено,
					ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"), Договор.Ссылка);
			КонецЕсли;		
		КонецЕсли; 
		
		Если ЕстьКодСчетаБУ Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СчетУчета) Тогда
				КодСчетаБУ = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_КодСчетаСАП);	
				Если ЗначениеЗаполнено(Договор) Тогда
					Счет = ПолучитьСчет1С(КодСчетаБУ, Договор.Валюта, Договор.РасчетыВУЕ, , СтрокаТаблицы.НомерСтроки); 
				Иначе 
					Счет = ПолучитьСчет1С(КодСчетаБУ); 
				КонецЕсли; 
				СтрокаТаблицы.ДанныеБазы_СчетУчета = Счет;
			КонецЕсли; 
		КонецЕсли;
				
		Если ЕстьСНИЛСФизЛица Тогда
			СНИЛСФизЛица = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_СНИЛСФизЛица);
			ФизЛицо = ПолучитьФизЛицо(СНИЛСФизЛица);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоискИСозданиеСправочников_ОС(КонтекстЗагрузки, ДанныеФайла) 
	
	ДополнитьТаблицуКолонками_ОС(ДанныеФайла);
			
	МэппингМВЗ = ПолучитьМэппингМВЗ(КонтекстЗагрузки);
	СтатьиЗатратМэппинг = ПолучитьДанныеМэппингаСтатейЗатрат(КонтекстЗагрузки);
	КонтекстЗагрузки.Вставить("ГруппаПоСчету1с", ПолучитьСозадатьИерархиюДляОС());
	
	Для каждого СтрокаТаблицы Из ДанныеФайла Цикл 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ЦФО)  Тогда
			СтрокаТаблицы.ДанныеБазы_ЦФО = ПолучитьПодразделениеЦФО(СтрокаТаблицы.ДанныеФайла_НаименованиеЦФО, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_МВЗ)  Тогда
			СтрокаТаблицы.ДанныеБазы_МВЗ = ПолучитьМВЗПоМэппингу(СтрокаТаблицы.ДанныеФайла_КодМВЗ, МэппингМВЗ, СтрокаТаблицы.НомерСтроки);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ОС) Тогда
			СтрокаТаблицы.ДанныеБазы_ОС = НайтиСоздатьОС(СтрокаТаблицы, КонтекстЗагрузки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат) Тогда
			КодСАП = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_СчетЗатратКодСАП);	
			СтатьяЗатрат = СтатьиЗатратМэппинг.Получить(КодСАП);
			Если СтатьяЗатрат = Неопределено Тогда
				ДобавитьОшибку("Не найдена статья затрат согласно мэппингу по коду SAP ", КодСАП, СтрокаТаблицы.НомерСтроки);
				СтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
			КонецЕсли; 
			СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат = СтатьяЗатрат;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СпособОтраженияРасходов) Тогда
			СтрокаТаблицы.ДанныеБазы_СпособОтраженияРасходов = 
				ПолучитьСпособОтраженияРасходов(СтрокаТаблицы.ДанныеБазы_МВЗ,
												СтрокаТаблицы.ДанныеБазы_ЦФО,
												КонтекстЗагрузки.ПостоянныеДанные.Организация,
												СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат,
												СтрокаТаблицы.НомерСтроки);	
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_МОЛ) Тогда
			СтрокаТаблицы.ДанныеБазы_МОЛ = ПолучитьФизЛицоПоФИО(СтрокаТаблицы.ДанныеФайла_ФиоФизЛица, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СпособПоступленияАктивов) Тогда
			СтрокаТаблицы.ДанныеБазы_СпособПоступленияАктивов = ПолучитьЗначениеПеречисления("СпособыПоступленияАктивов", 
				СтрокаТаблицы.ДанныеФайла_СпособПоступленияРегл, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоискИСозданиеСправочников_НМА(КонтекстЗагрузки, ДанныеФайла)
	
	ДополнитьТаблицуКолонками_НМА(ДанныеФайла);
			
	МэппингМВЗ = ПолучитьМэппингМВЗ(КонтекстЗагрузки);
	СтатьиЗатратМэппинг = ПолучитьДанныеМэппингаСтатейЗатрат(КонтекстЗагрузки);
	КонтекстЗагрузки.Вставить("ГруппаНМАПоСчету1с", ПолучитьСозадатьИерархиюДляНМА());
	
	Для каждого СтрокаТаблицы Из ДанныеФайла Цикл 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ЦФО)  Тогда
			СтрокаТаблицы.ДанныеБазы_ЦФО = ПолучитьПодразделениеЦФО(СтрокаТаблицы.ДанныеФайла_НаименованиеЦФО, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_МВЗ)  Тогда
			СтрокаТаблицы.ДанныеБазы_МВЗ = ПолучитьМВЗПоМэппингу(СтрокаТаблицы.ДанныеФайла_КодМВЗ, МэппингМВЗ, СтрокаТаблицы.НомерСтроки);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_НМА) Тогда
			СтрокаТаблицы.ДанныеБазы_НМА = ПолучитьСоздатьНМА(СтрокаТаблицы, КонтекстЗагрузки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат) Тогда
			КодСАП = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_СчетЗатратКодСАП);	
			СтатьяЗатрат = СтатьиЗатратМэппинг.Получить(КодСАП);
			Если СтатьяЗатрат = Неопределено Тогда
				ДобавитьОшибку("Не найдена статья затрат согласно мэппингу по коду SAP ", КодСАП, СтрокаТаблицы.НомерСтроки);
				СтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
			КонецЕсли; 
			СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат = СтатьяЗатрат;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СпособОтраженияРасходов) Тогда
			СтрокаТаблицы.ДанныеБазы_СпособОтраженияРасходов = 
				ПолучитьСпособОтраженияРасходов(СтрокаТаблицы.ДанныеБазы_МВЗ,
												СтрокаТаблицы.ДанныеБазы_ЦФО,
												КонтекстЗагрузки.ПостоянныеДанные.Организация,
												СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат,
												СтрокаТаблицы.НомерСтроки);	
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СпособПоступленияАктивов) Тогда
			СтрокаТаблицы.ДанныеБазы_СпособПоступленияАктивов = ПолучитьЗначениеПеречисления("СпособыПоступленияАктивов", 
				СтрокаТаблицы.ДанныеФайла_СпособПоступленияРегл, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоискИСозданиеСправочников_РБП(КонтекстЗагрузки, ДанныеФайла)
	
	ДополнитьТаблицуКолонками_РБП(ДанныеФайла);
			
	МэппингМВЗ = ПолучитьМэппингМВЗ(КонтекстЗагрузки);
	СтатьиЗатратМэппинг = ПолучитьДанныеМэппингаСтатейЗатрат(КонтекстЗагрузки);
	МэппингВидовАктивов = ПолучитьДанныеМэппингаВидовАктивов(КонтекстЗагрузки);
	КонтекстЗагрузки.Вставить("МэппингВидовАктивов", МэппингВидовАктивов);
	
	Для каждого СтрокаТаблицы Из ДанныеФайла Цикл 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ФизЛицо)  Тогда
			СтрокаТаблицы.ДанныеБазы_ФизЛицо = ПолучитьФизЛицоПоФИО(СтрокаТаблицы.ДанныеФайла_ФизЛицоНаименование, СтрокаТаблицы.НомерСТроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_Контрагент)  Тогда
			СтрокаТаблицы.ДанныеБазы_Контрагент = ПолучитьКотрагента(СтрокаТаблицы.ДанныеФайла_КодКонтрагента, СтрокаТаблицы.НомерСтроки);	
		КонецЕсли;
			
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ЦФО)  Тогда
			СтрокаТаблицы.ДанныеБазы_ЦФО = ПолучитьПодразделениеЦФО(СтрокаТаблицы.ДанныеФайла_НаименованиеЦФО, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_МВЗ)  Тогда
			СтрокаТаблицы.ДанныеБазы_МВЗ = ПолучитьМВЗПоМэппингу(СтрокаТаблицы.ДанныеФайла_КодМВЗ, МэппингМВЗ, СтрокаТаблицы.НомерСтроки);	
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат) Тогда
			КодСАП = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_СчетЗатратКодСАП);	
			СтатьяЗатрат = СтатьиЗатратМэппинг.Получить(КодСАП);
			Если СтатьяЗатрат = Неопределено Тогда
				ДобавитьОшибку("Не найдена статья затрат согласно мэппингу по коду SAP ", КодСАП, СтрокаТаблицы.НомерСтроки);
				СтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
			КонецЕсли; 
			СтрокаТаблицы.ДанныеБазы_СтатьяЗатрат = СтатьяЗатрат;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СчетУчета) Тогда
			СтрокаТаблицы.ДанныеБазы_СчетУчета = ПолучитьСчетУчетаРБП(СтрокаТаблицы);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ВидАктива) Тогда
			СтрокаТаблицы.ДанныеБазы_ВидАктива = ПолучитьВидАктиваРБП(
				СтрокаТаблицы.ДанныеФайла_СчетУчетаКодСАП, МэппингВидовАктивов, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ГруппаРБП) Тогда
			СтрокаТаблицы.ДанныеБазы_ГруппаРБП = ПолучитьГруппуРБП(
				СтрокаТаблицы.ДанныеФайла_СчетУчетаКодСАП, МэппингВидовАктивов, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ВидРБП) Тогда
			СтрокаТаблицы.ДанныеБазы_ВидРБП = ПолучитьЗначениеПеречисленияПоНаименованию(
				"ВидыРБП", СтрокаТаблицы.ДанныеФайла_ВидРБП, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ВидРБПМСФО) Тогда
			СтрокаТаблицы.ДанныеБазы_ВидРБПМСФО = ПолучитьВидРБПМСФО(СтрокаТаблицы.ДанныеФайла_ВидРБПМСФО, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_РБП) Тогда
			СтрокаТаблицы.ДанныеБазы_РБП = ПолучитьСоздатьРБП(КонтекстЗагрузки, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоискИСозданиеСправочников_Товары(КонтекстЗагрузки, ДанныеФайла)
	
	ДополнитьТаблицуКолонками_Товары(ДанныеФайла);
	
	ЭтоЗагрузкаТоваров = КонтекстЗагрузки.ШаблонЗагрузки = "МПЗ_Товары";
	Если ЭтоЗагрузкаТоваров Тогда
		МэппингСкладов = ПолучитьДанныеМэппингаСкладов(КонтекстЗагрузки);
	КонецЕсли; 
	Для каждого СтрокаТаблицы Из ДанныеФайла Цикл 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ЕдИзмерения)  Тогда
			СтрокаТаблицы.ДанныеБазы_ЕдИзмерения = ПолучитьЕдИзмерения(СтрокаТаблицы.ДанныеФайла_КодЕдиницыИзмерения, СтрокаТаблицы.НомерСТроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_СчетУчета)  Тогда
			СтрокаТаблицы.ДанныеБазы_СчетУчета = ПолучитьСчет1С(СтрокаТаблицы.ДанныеФайла_СчетУчетаКодСАПБУ,,,, СтрокаТаблицы.НомерСтроки);	
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_Номенклатура)  Тогда
			Если ЭтоЗагрузкаТоваров Тогда
				Номенклатура = ПолучитьНоменклатуруПоМэппингуРС(СтрокаТаблицы.ДанныеФайла_КодНоменклатуры, СтрокаТаблицы.НомерСтроки);
			Иначе 
				Номенклатура = ПолучитьНоменклатуру(СтрокаТаблицы.ДанныеФайла_КодНоменклатуры, СтрокаТаблицы.НомерСтроки);
			КонецЕсли; 
				СтрокаТаблицы.ДанныеБазы_Номенклатура = Номенклатура;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_ЦФО)  Тогда
			СтрокаТаблицы.ДанныеБазы_ЦФО = ПолучитьПодразделениеЦФО(СтрокаТаблицы.ДанныеФайла_НаименованиеЦФО, СтрокаТаблицы.НомерСтроки);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДанныеБазы_Склад)  Тогда
			Если ЭтоЗагрузкаТоваров Тогда
				СтрокаТаблицы.ДанныеБазы_Склад = ПолучитьСкладПоМэппингу(СтрокаТаблицы.ДанныеФайла_КодСклада,
					МэппингСкладов, СтрокаТаблицы.НомерСтроки);
			Иначе	
				СтрокаТаблицы.ДанныеБазы_Склад = ПолучитьСклад(СтрокаТаблицы.ДанныеФайла_КодСклада, СтрокаТаблицы.НомерСтроки);	
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры	

Процедура ДополнитьТаблицуКолонками_Взаиморасчеты(ДанныеФайла) 
	
	//Колонки данных базы
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_Контрагент")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), "Контрагент");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_Договор")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"), "Договор");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СчетУчета")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"), "Счет учета");
	КонецЕсли; 
	
	ДополнитьТаблицуКолонками_Ошибки(ДанныеФайла);
	
КонецПроцедуры

Процедура ДополнитьТаблицуКолонками_ОС(ДанныеФайла) 
	
	//Колонки данных базы
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_МВЗ")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_МВЗ", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), "МВЗ");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ЦФО")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ЦФО", Новый ОписаниеТипов("СправочникСсылка.Подразделения"), "ЦФО");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ОС")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ОС", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"), "ОС");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СтатьяЗатрат")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"), "Статья затрат");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СпособОтраженияРасходов")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СпособОтраженияРасходов", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"), "Способ отражения расходов");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СпособПоступленияАктивов")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СпособПоступленияАктивов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПоступленияАктивов"), "Способ поступления активов");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_МОЛ")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_МОЛ", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), "МОЛ");
	КонецЕсли; 
	
	ДополнитьТаблицуКолонками_Ошибки(ДанныеФайла);
	
КонецПроцедуры

Процедура ДополнитьТаблицуКолонками_НМА(ДанныеФайла) 
	
	//Колонки данных базы
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_МВЗ")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_МВЗ", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), "МВЗ");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ЦФО")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ЦФО", Новый ОписаниеТипов("СправочникСсылка.Подразделения"), "ЦФО");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_НМА")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_НМА", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"), "НМА");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СтатьяЗатрат")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"), "Статья затрат");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СпособОтраженияРасходов")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СпособОтраженияРасходов", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"), "Способ отражения расходов");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СпособПоступленияАктивов")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СпособПоступленияАктивов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПоступленияАктивов"), "Способ поступления активов");
	КонецЕсли; 
	
	ДополнитьТаблицуКолонками_Ошибки(ДанныеФайла);
	
КонецПроцедуры

Процедура ДополнитьТаблицуКолонками_РБП(ДанныеФайла) 
	
	//Колонки данных базы
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ФизЛицо")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), "ФизЛицо");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_Контрагент")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), "Контрагент");
	КонецЕсли; 	
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_МВЗ")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_МВЗ", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), "МВЗ");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ЦФО")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ЦФО", Новый ОписаниеТипов("СправочникСсылка.Подразделения"), "ЦФО");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СтатьяЗатрат")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СтатьяЗатрат", Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"), "Статья затрат");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ВидРБП")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ВидРБП", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРБП"), "Вид РБП");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ВидРБПМСФО")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ВидРБПМСФО", Новый ОписаниеТипов("СправочникСсылка.ГПН_ВидыРБП_МСФО"), "Вид РБП МСФО");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ВидАктива")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ВидАктива", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовДляРБП"), "Вид актива");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СчетУчета")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"), "Счет учета");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ГруппаРБП")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ГруппаРБП", Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"), "Группа РБП");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_РБП")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_РБП", Новый ОписаниеТипов("СправочникСсылка.РасходыБудущихПериодов"), "РБП");
	КонецЕсли; 
	
	ДополнитьТаблицуКолонками_Ошибки(ДанныеФайла);
	
КонецПроцедуры

Процедура ДополнитьТаблицуКолонками_Товары(ДанныеФайла) 
	
	//Колонки данных базы
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ЕдИзмерения")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ЕдИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"), "Ед. изм");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_СчетУчета")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"), "Счет учета");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_Номенклатура")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "Номенклатура");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_ЦФО")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_ЦФО", Новый ОписаниеТипов("СправочникСсылка.Подразделения"), "ЦФО");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("ДанныеБазы_Склад")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("ДанныеБазы_Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "Склад");
	КонецЕсли; 
	
	ДополнитьТаблицуКолонками_Ошибки(ДанныеФайла);
	
КонецПроцедуры

Процедура ДополнитьТаблицуКолонками_Ошибки(ДанныеФайла) 
	
	Если ДанныеФайла.Колонки.Найти("Ошибки_Ошибки")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("Ошибки_Ошибки", Новый ОписаниеТипов("Булево"), "Ошибки");
	КонецЕсли; 
	Если ДанныеФайла.Колонки.Найти("Ошибки_Описание")=Неопределено Тогда
		ДанныеФайла.Колонки.Добавить("Ошибки_Описание", Новый ОписаниеТипов("Строка"), "Описание");	
	КонецЕсли; 
	
КонецПроцедуры
  
Процедура ЗагрузкаДанныхПоРасчетам(КонтекстЗагрузки, ДанныеФайла)
	
	ТаблицаДанных = ДанныеФайла.Скопировать();
	
	ТаблицаДанных.Сортировать("ДанныеФайла_КодСчетаСАП");
	
	МассивСчетов = ТаблицаДанных.ВыгрузитьКолонку("ДанныеФайла_КодСчетаСАП");
	МассивСчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	Запрос.УстановитьПараметр("Организация", КонтекстЗагрузки.ПостоянныеДанные.Организация);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP, """") КАК СчетСАП,
	|	ВводНачальныхОстатковПоВзаиморасчетам.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатковПоВзаиморасчетам КАК ВводНачальныхОстатковПоВзаиморасчетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО ВводНачальныхОстатковПоВзаиморасчетам.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков
	|ГДЕ
	|	ВводНачальныхОстатковПоВзаиморасчетам.Дата = &Дата
	|	И ВводНачальныхОстатковПоВзаиморасчетам.Организация = &Организация
	|	И ЕСТЬNULL(ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP, """") В (&МассивСчетов)
	|	И ВводНачальныхОстатковПоВзаиморасчетам.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ДокументПоСчету = Новый Соответствие; 
	
	Пока Выборка.Следующий() Цикл
		ДокументПоСчету.Вставить(Выборка.СчетСАП, Выборка.Ссылка);	
	КонецЦикла; 
	
	ШаблонКомментария =  "Загрузка начальных остатков. Раздел: "+ КонтекстЗагрузки.ПредставлениеШаблона
	+", Счет SAP: %1";
	
	Для каждого СчетСАП Из МассивСчетов Цикл
		
		ДокументСсылка = ДокументПоСчету.Получить(СчетСАП);
		
		Если ДокументСсылка<>Неопределено Тогда
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.ВводНачальныхОстатковПоВзаиморасчетам.СоздатьДокумент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, КонтекстЗагрузки.ПостоянныеДанные);
		
		ДокОбъект.ПометкаУдаления 	= Ложь;	
		ДокОбъект.Комментарий 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетСАП);	
		ДокОбъект.КоррСчет 			= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");	
		ДокОбъект.Ответственный		= Пользователи.ТекущийПользователь();
		ДокОбъект.Проведен			= Ложь;
		
		ДокОбъект.ДанныеПоРасчетам.Очистить();
		ДокОбъект.ДанныеПоАвансам.Очистить();
		ДокОбъект.ДанныеПоРезервамПоСомнительнымДолгам.Очистить();
		
		//Данные по курсовым разницам
		ТЗКурсовыхРазниц = Новый ТаблицаЗначений;
		ТЗКурсовыхРазниц.Колонки.Добавить("Контрагент");
		ТЗКурсовыхРазниц.Колонки.Добавить("Договор");
		ТЗКурсовыхРазниц.Колонки.Добавить("КурсоваяРазница");
		
		ТаблицаДанныхПоСчету = ТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеФайла_КодСчетаСАП", СчетСАП));
		Для каждого СтрокаДанных Из ТаблицаДанныхПоСчету Цикл
			
			ЭтоАванс = Ложь;
			Если КонтекстЗагрузки.ШаблонЗагрузки = "Взаиморасчеты_АвансыПолученные" ИЛИ
				КонтекстЗагрузки.ШаблонЗагрузки = "Взаиморасчеты_АвансыВыданные" Тогда
				СтрокаДокумента = ДокОбъект.ДанныеПоАвансам.Добавить();
				ЭтоАванс = Истина;
			ИначеЕсли КонтекстЗагрузки.ШаблонЗагрузки = "Взаиморасчеты_РасчетыСПоставщиками" ИЛИ
				КонтекстЗагрузки.ШаблонЗагрузки = "Взаиморасчеты_РасчетыСПокупателями" Тогда
				СтрокаДокумента = ДокОбъект.ДанныеПоРасчетам.Добавить();			
			ИначеЕсли КонтекстЗагрузки.ШаблонЗагрузки = "Взаиморасчеты_ПрочиеРасчеты" Тогда
				Если СтрокаДанных.ДанныеФайла_СуммаРегл<0 Тогда
					СтрокаДокумента = ДокОбъект.ДанныеПоРасчетам.Добавить();	
				ИначеЕсли СтрокаДанных.ДанныеФайла_СуммаРегл>0 Тогда
					СтрокаДокумента = ДокОбъект.ДанныеПоАвансам.Добавить();	
					ЭтоАванс = Истина;
				Иначе 
					ДобавитьОшибку("Сумма взаиморасчетов в файле равна нулю, строка не будет загружена", , СтрокаДанных.НомерСтроки);
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			
			СтрокаДокумента.Контрагент = СтрокаДанных.ДанныеБазы_Контрагент;
			СтрокаДокумента.ДоговорКонтрагента = СтрокаДанных.ДанныеБазы_Договор;
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДокумента.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			СтрокаДокумента.ВалютаВзаиморасчетов = ДанныеДоговора.ВалютаВзаиморасчетов;
			ВалютаИзФайла = ПолучитьВалюту(СтрокаДанных.ДанныеФайла_ДокРасчетовВалюта, СтрокаДанных.НомерСтроки); 
			Если ЗначениеЗаполнено(СтрокаДокумента.ВалютаВзаиморасчетов) И ЗначениеЗаполнено(ВалютаИзФайла) 
				И СтрокаДокумента.ВалютаВзаиморасчетов<>ВалютаИзФайла Тогда
				ДобавитьОшибку("Не соответвие валюты найденного договора и валюты остатка из файла",
				"Строка файла: "+СтрокаДанных.НомерСтроки+", Договор: "+СтрокаДокумента.ДоговорКонтрагента + ", Валюта из файла: "+ВалютаИзФайла);
			КонецЕсли;
			
			СтрокаДокумента.СчетУчетаРасчетовСКонтрагентом = СтрокаДанных.ДанныеБазы_СчетУчета;
						
			ПараметрыДокРасчетов = ПолучитьПараметрыДокРасчетов();
			ЗаполнитьПараметрыДокРасчетов(ПараметрыДокРасчетов, СтрокаДанных, СтрокаДокумента, КонтекстЗагрузки);
			ДокРасчетов = ПолучитьСоздатьДокументРасчетов(ПараметрыДокРасчетов);
			
			Если ЭтоАванс Тогда
				СтрокаДокумента.ДокументОплаты = ДокРасчетов;
			Иначе
				СтрокаДокумента.ДокументРасчетовСКонтрагентом = ДокРасчетов;	
			КонецЕсли;
			
			РасчетыВРублях = СтрокаДокумента.ВалютаВзаиморасчетов = Кэш.ВалютаРегламентированногоУчета;
			
			СтрокаДокумента.СуммаРегл = ?(СтрокаДанных.ДанныеФайла_СуммаРегл>0,
				СтрокаДанных.ДанныеФайла_СуммаРегл, -СтрокаДанных.ДанныеФайла_СуммаРегл);
			СтрокаДокумента.СуммаРеглСУчетомПереоценки = ?(СтрокаДанных.ДанныеФайла_СуммаРеглСУчетомПереоценки>0,
				СтрокаДанных.ДанныеФайла_СуммаРеглСУчетомПереоценки, -СтрокаДанных.ДанныеФайла_СуммаРеглСУчетомПереоценки);
				
			Если РасчетыВРублях Тогда
				СтрокаДокумента.СуммаВзаиморасчетов = ?(СтрокаДанных.ДанныеФайла_СуммаВВалютеДоговора>0, 
					СтрокаДанных.ДанныеФайла_СуммаВВалютеДоговора, -СтрокаДанных.ДанныеФайла_СуммаВВалютеДоговора);
			Иначе 
				СтрокаДокумента.СуммаВзаиморасчетов = ?(СтрокаДанных.ДанныеФайла_СуммаВВалютеРасчетов>0,
					СтрокаДанных.ДанныеФайла_СуммаВВалютеРасчетов,-СтрокаДанных.ДанныеФайла_СуммаВВалютеРасчетов);			
			КонецЕсли;
			
			СтрокаДокумента.СуммаУпр = СтрокаДокумента.СуммаРеглСУчетомПереоценки;
			
			СтрокаДокумента.КратностьВзаиморасчетов = 1;
			СтрокаДокумента.КурсВзаиморасчетов = ?(СтрокаДокумента.ВалютаВзаиморасчетов = Кэш.ВалютаРегламентированногоУчета, 1,
			СтрокаДокумента.СуммаРегл/СтрокаДокумента.СуммаВзаиморасчетов);
			
			КурсоваяРазница = СтрокаДокумента.СуммаРеглСУчетомПереоценки - СтрокаДокумента.СуммаРегл;
			Если КурсоваяРазница<>0 Тогда
				СтрокаПереоценки = ТЗКурсовыхРазниц.Добавить();
				СтрокаПереоценки.Контрагент = СтрокаДокумента.Контрагент;
				СтрокаПереоценки.Договор = СтрокаДокумента.ДоговорКонтрагента;
				СтрокаПереоценки.КурсоваяРазница = КурсоваяРазница;
			КонецЕсли;
			
			
		КонецЦикла; 
		
		Попытка
			РежимЗаписи = ?(ДокОбъект.ЭтоНовый(), РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.ОтменаПроведения); 
			ДокОбъект.Записать(РежимЗаписи);
			
			СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
			СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
			СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.ДанныеПоАвансам.Итог("СуммаРеглСУчетомПереоценки")
													+ДокОбъект.ДанныеПоРасчетам.Итог("СуммаРеглСУчетомПереоценки")
													+ДокОбъект.ДанныеПоРезервамПоСомнительнымДолгам.Итог("СуммаБУ");
			
			ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Активность = Истина;
			ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
			ЗаписьРегистра.СчетSAP = СчетСАП;
			ЗаписьРегистра.Записать(Истина);
		Исключение
			ДобавитьОшибку("Не удалось записать новый документ ввода начальных остатков по взаиморасчетам", ОписаниеОшибки());
		КонецПопытки; 
		
		Если ТЗКурсовыхРазниц.Количество()>0 Тогда
			ЗаписатьДокументКорректировкиКурсовыхРазниц(КонтекстЗагрузки, ТЗКурсовыхРазниц, СчетСАП);
		КонецЕсли; 

	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСкладПоМэппингу(Знач КодСкладаSAP, Мэппинг, НомерСтроки);
	
	КодСкладаSAP = УдалитьПробелы(КодСкладаSAP);
	Склад = Мэппинг.Получить(КодСкладаSAP);
	Если Склад = Неопределено Тогда
		ДобавитьОшибку("Не найден склад согласно мэппингу по коду SAP", КодСкладаSAP, НомерСтроки);
		Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция ПолучитьДанныеМэппингаСкладов(КонтекстЗагрузки) 
		
	МэппингСкладов = Новый Соответствие; 
	
	ТаблицаExcel = ЗагрузитьМетодом_MSEXCEL(КонтекстЗагрузки.ИмяФайла, КонтекстЗагрузки.ПостоянныеДанные.НомерЛистаМэппингаСкладов, 0,
		2, 0, 0);	
		
	СписокКолонок = "НомерСтроки, N1, N4";
	
	ДанныеМэппинга =  ТаблицаExcel.Скопировать(, СписокКолонок);
	
	Для каждого СтрокаДанных Из ДанныеМэппинга Цикл
		Ошибки = Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N1) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код склада SAP в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли; 		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N4) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код склада 1с в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли;
		
		Если Не Ошибки Тогда
			КодСкладаSAP = УдалитьПробелы(СтрокаДанных.N1);
			Склад = ПолучитьСклад(СтрокаДанных.N4, 0);
			Если ЗначениеЗаполнено(Склад) Тогда
				МэппингСкладов.Вставить(КодСкладаSAP, Склад);	
			Иначе 
				ДобавитьОшибку("Не удалось опеределить склад 1с по коду 1с ("+СтрокаДанных.N4+")"
					+ ", данные мэппинга не добавлены для строки мэппинга", СтрокаДанных.НомерСтроки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МэппингСкладов;
	
КонецФункции

Функция ПолучитьВидАктиваРБП(Знач СчетСАП, Мэппинг, НомерСтроки);
	
	СчетСАП = УдалитьПробелы(СчетСАП);
	ДанныеМэппинга = Мэппинг.Получить(СчетСАП);
	Если ДанныеМэппинга = Неопределено Тогда
		ДобавитьОшибку("Не найден вид актива согласно мэппингу по коду счета SAP", СчетСАП, НомерСтроки);
		ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыАктивовДляРБП.ПустаяСсылка");
	Иначе 
		ВидАктива = ДанныеМэппинга.ВидАктива;
	КонецЕсли;
	
	Возврат ВидАктива;
	
КонецФункции

Функция ПолучитьСчетУчетаРБП(СтрокаТаблицы);
	
	СчетСАП = УдалитьПробелы(СтрокаТаблицы.ДанныеФайла_СчетУчетаКодСАП);
	Счет1с = ПолучитьСчет1С(СчетСАП,,,,СтрокаТаблицы.НомерСтроки);
	//Если Счет1С = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасходыБудущихПериодов_") Тогда
	//	КоличествоМесяцев = СтрокаВЧисло(СтрокаТаблицы.ДанныеФайла_КоличествоМесяцев, СтрокаТаблицы.номерСтроки);
	//	
	//	Если КоличествоМесяцев<>Неопределено Тогда
	//		Если КоличествоМесяцев<=12 Тогда
	//			Счет1С = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КраткосрочныеРасходыБудущихПериодов");	
	//		Иначе 
	//			Счет1С = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДолгосрочныеРасходыБудущихПериодов");
	//		КонецЕсли; 
	//	Иначе 
	//		Счет1С = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	//		ДобавитьОшибку("Не удалось определить субсчет 76.97, не верно указан срок использования",
	//			КоличествоМесяцев, СтрокаТаблицы.НомерСтроки);
	//	КонецЕсли; 
	//КонецЕсли; 
	
	Возврат Счет1с;
	
КонецФункции

Функция ПолучитьГруппуРБП(Знач СчетСАП, Мэппинг, НомерСтроки);
	
	СчетСАП = УдалитьПробелы(СчетСАП);
	ДанныеМэппинга = Мэппинг.Получить(УдалитьПробелы(СчетСАП));
	Если ДанныеМэппинга = Неопределено Тогда
		ДобавитьОшибку("Не удалось определить группу согласно мэппингу по коду счета SAP", СчетСАП, НомерСтроки);
		Группа = ПредопределенноеЗначение("Справочник.РасходыБудущихПериодов.ПустаяСсылка");
	Иначе 
		Группа = ДанныеМэппинга.Группа;
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

Функция ПолучитьЗначениеПеречисленияПоНаименованию(ИмяПеречисления, Наименование, НомерСтроки) 
		
	Если НЕ Кэш.Свойство("ПеречислениеПоНаименованию") Тогда
		Кэш.Вставить("ПеречислениеПоНаименованию", Новый Структура);
	КонецЕсли;
	
	Если НЕ Кэш.ПеречислениеПоНаименованию.Свойство(ИмяПеречисления) Тогда
		Кэш.ПеречислениеПоНаименованию.Вставить(ИмяПеречисления, Новый Соответствие);
		КэшПеречисления = Кэш.ПеречислениеПоНаименованию[ИмяПеречисления];
		Значения = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления;
		Для каждого Элемент Из Значения Цикл
			КэшПеречисления.Вставить(Элемент.Синоним, Элемент.Имя);	
		КонецЦикла; 
	КонецЕсли;
	
	ТекущийКэш = Кэш.ПеречислениеПоНаименованию[ИмяПеречисления];
	Значение = ТекущийКэш.Получить(Наименование);
	Если Значение=Неопределено Тогда
		ДобавитьОшибку("Не удалось определить перечиление ("+ИмяПеречисления+") по наименованию", Наименование, НомерСтроки);
		Значение = ПредопределенноеЗначение("Перечисление."+ИмяПеречисления+".ПустаяСсылка");
	Иначе 
		Значение = ПредопределенноеЗначение("Перечисление."+ИмяПеречисления+"."+Значение);
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции
 
Функция ПолучитьСоздатьГруппыРБП(НаименованияГрупп) 
		
	Результат = Новый Соответствие; 
	
	НаименованиеКореннойПапки = "РБП ГО ГПН Аэро";
	
	Корень = Справочники.РасходыБудущихПериодов.НайтиПоНаименованию(НаименованиеКореннойПапки, Истина, 
		ПредопределенноеЗначение("Справочник.РасходыБудущихПериодов.ПустаяСсылка"));
	Если НЕ ЗначениеЗаполнено(Корень) Тогда
		Группа = Справочники.РасходыБудущихПериодов.СоздатьГруппу();
		Группа.Наименование = НаименованиеКореннойПапки;
		Группа.Записать();
		Результат.Вставить("Корень", Группа.Ссылка);
	Иначе 
		Результат.Вставить("Корень", Корень);
	КонецЕсли; 
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("МассивИмен", НаименованияГрупп);
	Запрос.УстановитьПараметр("Родитель", Результат.Получить("Корень"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка,
	|	РасходыБудущихПериодов.Наименование
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.ЭтоГруппа = ИСТИНА
	|	И РасходыБудущихПериодов.Наименование В(&МассивИмен)
	|	И РасходыБудущихПериодов.Родитель = &Родитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	
	Для каждого НаименованиеГруппы Из НаименованияГрупп Цикл
				
		СтрокаТЗ = ТЗ.Найти(НаименованиеГруппы, "Наименование");
		Если СтрокаТЗ=Неопределено Тогда
			Группа = Справочники.РасходыБудущихПериодов.СоздатьГруппу();
			Группа.Наименование = НаименованиеГруппы;
			Группа.Родитель = Результат.Получить("Корень");
			Группа.Записать();
			Результат.Вставить(НаименованиеГруппы, Группа.Ссылка);
		Иначе 
			Результат.Вставить(НаименованиеГруппы, СтрокаТЗ.Ссылка);
		КонецЕсли; 
	КонецЦикла;	 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоздатьРБП(КонтекстЗагрузки, СтрокаДанных) 
		
	Если НЕ Кэш.Свойство("РБП") Тогда
		ИнициализироватьКэшРБП(); 
	КонецЕсли; 
	
	РБП = Кэш.РБП.Получить(СтрокаДанных.ДанныеФайла_Наименование);
	Если РБП <> Неопределено  Тогда
		ОбъектРБП = РБП.ПолучитьОбъект();
	Иначе 
		ОбъектРБП = Справочники.РасходыБудущихПериодов.СоздатьЭлемент();
	КонецЕсли; 
		 
	ОбъектРБП.Наименование = СтрокаДанных.ДанныеФайла_Наименование; 
	
	ОбъектРБП.ГПН_Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
	ОбъектРБП.ВидРБП = СтрокаДанных.ДанныеБазы_ВидРБП;
	ОбъектРБП.ГПН_ВидРБП_МСФО = СтрокаДанных.ДанныеБазы_ВидРБПМСФО;
	
	ОбъектРБП.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням");
	ОбъектРБП.ДатаНачалаСписания = СтрокаДанных.ДанныеФайла_ДатаНачалаСписания;
	ОбъектРБП.ДатаОкончанияСписания= СтрокаДанных.ДанныеФайла_ДатаОкончанияСписания;
	ОбъектРБП.Сумма = СтрокаДанных.ДанныеФайла_Стоимость;
	ОбъектРБП.Родитель = СтрокаДанных.ДанныеБазы_ГруппаРБП;
	
	ОбъектРБП.Подразделение = СтрокаДанных.ДанныеБазы_ЦФО;
	ОбъектРБП.ПодразделениеОрганизации = СтрокаДанных.ДанныеБазы_МВЗ;
	ОбъектРБП.СтатьяЗатрат = СтрокаДанных.ДанныеБазы_СтатьяЗатрат;
	
	ОбъектРБП.СчетБУ = СтрокаДанных.ДанныеБазы_СчетУчета;
	ОбъектРБП.СчетНУ = ГПН_КГ_НалоговыйУчет.ПолучитьСчетНУПоСоответствиюБУНУ(ОбъектРБП.СчетБУ, КонтекстЗагрузки.ПостоянныеДанные.Дата);
	
	ОбъектРБП.ВидАктива = СтрокаДанных.ДанныеБазы_ВидАктива;
	
	Попытка
		Если НЕ КонтекстЗагрузки.ТолькоПоиск Тогда
			ОбъектРБП.Записать();
			РБП = ОбъектРБП.Ссылка;
			Кэш.РБП.Вставить(ОбъектРБП.Код, РБП);
		КонецЕсли; 
	Исключение
		ДобавитьОшибку("Не удалось записать новое РБП", ОписаниеОшибки(), СтрокаДанных.НомерСтроки);
		РБП = ПредопределенноеЗначение("Справочник.РасходыБудущихПериодов.ПустаяСсылка");
	КонецПопытки; 
			
	Возврат РБП;
	
КонецФункции

Процедура ЗагрузитьРБП(КонтекстЗагрузки, ДанныеФайла)
		
	ШаблонКомментария =  "Загрузка начальных остатков. Раздел: "+ КонтекстЗагрузки.ПредставлениеШаблона
	+", Счет SAP: %1";
	
	Для каждого СтрокаДанных Из ДанныеФайла Цикл
		СтрокаДанных.ДанныеФайла_СчетУчетаКодСАП = УдалитьПробелы(СтрокаДанных.ДанныеФайла_СчетУчетаКодСАП);	
	КонецЦикла; 
	
	МассивСчетов = ДанныеФайла.ВыгрузитьКолонку("ДанныеФайла_СчетУчетаКодСАП");
	МассивСчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаЗаписейРегистров.Ссылка,
	|	ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP,
	|	КорректировкаЗаписейРегистров.Дата
	|ИЗ
	|	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО (КорректировкаЗаписейРегистров.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков)
	|ГДЕ
	|	КорректировкаЗаписейРегистров.Дата = &Дата
	|	И КорректировкаЗаписейРегистров.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ДокументыКорректировки = Новый Соответствие; 
	Пока Выборка.Следующий() Цикл
		ДокументыКорректировки.Вставить(Выборка.СчетSAP, Выборка.Ссылка);	
	КонецЦикла; 
	
	Для каждого СчетSAP Из МассивСчетов Цикл
		
		ДокСсылка = ДокументыКорректировки.Получить(СчетSAP);
		Если ДокСсылка<>Неопределено Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		КонецЕсли;
		
		ДокОбъект.Дата 			= КонтекстЗагрузки.ПостоянныеДанные.Дата;
		ДокОбъект.Комментарий 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетSAP);
		ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокОбъект.ГПН_Основание = ДокОбъект.Комментарий;
		
		ДокОбъект.ТаблицаРегистровНакопления.Очистить();
		ДокОбъект.ТаблицаРегистровСведений.Очистить();
		ДокОбъект.ТаблицаРегистровБухгалтерии.Очистить();
		ДокОбъект.ЗаполнениеДвижений.Очистить();
		
		//бухгалтерские
		Регистр = Метаданные.РегистрыБухгалтерии.Хозрасчетный;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровБухгалтерии.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		
		ДокОбъект.Движения.Хозрасчетный.Очистить();
		
		Данные = ДанныеФайла.НайтиСтроки(Новый Структура("ДанныеФайла_СчетУчетаКодСАП", СчетSAP)); 
		Для каждого СтрокаДанных Из Данные Цикл
			//РБ Хозрасчетный
			Движения = ДокОбъект.Движения.Хозрасчетный;
			СтрокаДвижений = Движения.Добавить();
			СтрокаДвижений.Активность = Истина;			
			СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
			СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
			СтрокаДвижений.СчетДт = СтрокаДанных.ДанныеБазы_СчетУчета;
			
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт,
				"РасходыБудущихПериодов", СтрокаДанных.ДанныеБазы_РБП);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт,
				"РаботникиОрганизации", СтрокаДанных.ДанныеБазы_ФизЛицо);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетДт, СтрокаДвижений.СубконтоДт,
				"Контрагенты", СтрокаДанных.ДанныеБазы_Контрагент);
				
			СтрокаДвижений.СчетКт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");
			СтрокаДвижений.Сумма = СтрокаДанных.ДанныеФайла_Стоимость;			
		КонецЦикла; 
		
		ДокОбъект.Движения.Хозрасчетный.Записывать = Истина;

		Попытка
			ДокОбъект.Записать();
			СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
			СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
			СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.Движения.Хозрасчетный.Итог("Сумма");
			
			ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Активность = Истина;
			ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
			ЗаписьРегистра.СчетSAP = СчетSAP;
			ЗаписьРегистра.Записать(Истина);
			
			ЗаполнитьАналитическийУчетКорректировки(ДокОбъект);
		Исключение
			ДобавитьОшибку("Не удалось записать новый документ корректировки записей регистров для курсовых разниц", ОписаниеОшибки());
			Возврат;
		КонецПопытки; 
	
	КонецЦикла; 

КонецПроцедуры

Процедура ИнициализироватьКэшРБП() 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка,
	|	РасходыБудущихПериодов.Наименование
	|ИЗ
	|	Справочник.РасходыБудущихПериодов КАК РасходыБудущихПериодов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Кэш.Вставить("РБП", Новый Соответствие);
	ТекущийКэш = Кэш.РБП; 
	Пока Выборка.Следующий() Цикл
		ТекущийКэш.Вставить(Выборка.Наименование, Выборка.Ссылка);	
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьДанныеМэппингаВидовАктивов(КонтекстЗагрузки) 
		
	МэппингСтатей = Новый Соответствие; 
	
	ТаблицаExcel = ЗагрузитьМетодом_MSEXCEL(КонтекстЗагрузки.ИмяФайла, КонтекстЗагрузки.ПостоянныеДанные.НомерЛистаСМэппингомВидовАктивовРБП, 0,
		2, 0, 0);	
		
	СписокКолонок = "НомерСтроки, N1, N3, N4, N5";
	
	ДанныеМэппинга =  ТаблицаExcel.Скопировать(, СписокКолонок);
	
	НаименованияГруппРБП = ДанныеМэппинга.ВыгрузитьКолонку("N5");	
	НаименованияГруппРБП = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(НаименованияГруппРБП);
	Группы = ПолучитьСоздатьГруппыРБП(НаименованияГруппРБП);
	
	Для каждого СтрокаДанных Из ДанныеМэппинга Цикл
		Ошибки = Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N1) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код счета SAP в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли; 		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N3) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен счет учета 1с в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N4) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен вид актива РБП в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N5) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнена группа (папка) для РБП в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли;
		
		Если Не Ошибки Тогда
			//ВидАктива = ПолучитьЗначениеПеречисления("ВидыАктивовДляРБП", СтрокаДанных.N4);
			ВидАктива = ПолучитьЗначениеПеречисленияПоНаименованию("ВидыАктивовДляРБП", СтрокаДанных.N4, 0);
			СчетSAP = УдалитьПробелы(СтрокаДанных.N1);
			Группа = СтрокаДанных.N5;
			Если ЗначениеЗаполнено(ВидАктива) ИЛИ ЗначениеЗаполнено(Группа) Тогда
				МэппингСтатей.Вставить(СчетSAP, Новый Структура("ВидАктива, Группа",
																ВидАктива, Группы.Получить(Группа)));	
			Иначе 
				ДобавитьОшибку("Не удалось опеределить счет 1с по коду или вид актива по наименованию"
					+ ", данные мэппинга не добавлены для строки мэппинга", СтрокаДанных.НомерСтроки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МэппингСтатей;
	
КонецФункции
  
Процедура ЗаписатьДокументКорректировкиКурсовыхРазниц(КонтекстЗагрузки, ТЗКурсовыхРазниц, СчетСАП) 
	
	//Проверить изменили ли конфу
	Если НЕ Метаданные.Документы.КорректировкаЗаписейРегистров.Движения.Содержит(
			Метаданные.РегистрыНакопления.ГПН_КурсовыеРазницы) Тогда
			
		ДобавитьОшибку("Не изменена конфигурация, РС ""Курсовые разницы"" не добавлен"
			+ "в качетсве регистратора к корректировке записей регистров", "");
		Возврат;
		
	КонецЕсли; 
	
	Комментарий =  "Загрузка начальных остатков курсовых разниц. Организация: " + КонтекстЗагрузки.ПостоянныеДанные.Организация
															+ ", Раздел: "+ КонтекстЗагрузки.ПредставлениеШаблона
															+ ", Счет SAP: " + СчетСАП;
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	Запрос.УстановитьПараметр("СчетСАП", СчетСАП);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаЗаписейРегистров.Ссылка
	|ИЗ
	|	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО КорректировкаЗаписейРегистров.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков
	|ГДЕ
	|	КорректировкаЗаписейРегистров.Дата = &Дата
	|	И КорректировкаЗаписейРегистров.ПометкаУдаления = ЛОЖЬ
	|	И ЕСТЬNULL(ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP, """") = &СчетСАП";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе 
		ДокОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	КонецЕсли;
	
	ДокОбъект.Дата 			= КонтекстЗагрузки.ПостоянныеДанные.Дата;
	ДокОбъект.Комментарий 	= Комментарий;
	ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();

	ДокОбъект.ТаблицаРегистровНакопления.Очистить();
	ДокОбъект.ТаблицаРегистровСведений.Очистить();
	ДокОбъект.ТаблицаРегистровБухгалтерии.Очистить();
	ДокОбъект.ЗаполнениеДвижений.Очистить();
	
	РегСвМетаданные = Метаданные.РегистрыНакопления.ГПН_КурсовыеРазницы;
	СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровНакопления.Добавить();
	СтрокаТЧ.Имя 			= РегСвМетаданные.Имя;
	СтрокаТЧ.Представление 	= РегСвМетаданные.Синоним;
	
	
	Движения = ДокОбъект.Движения.ГПН_КурсовыеРазницы;
	Движения.Очистить();
	
	Для каждого СтрокаДанных Из ТЗКурсовыхРазниц Цикл
		СтрокаДвижений = Движения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаДанных);
		
		СтрокаДвижений.Период = ДокОбъект.Дата;
		СтрокаДвижений.ВидДвиженияДтКт = ?(СтрокаДвижений.КурсоваяРазница>0,
			ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Дебет"),
			ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Кредит"));
		СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
		СтрокаДвижений.СчетУчетаКурсовойРазницы = ?(СтрокаДвижений.КурсоваяРазница>0,
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД"),
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходы"));
		СтрокаДвижений.ВидОперацииПереоценки = ПредопределенноеЗначение("Перечисление.ГПН_ВидыОперацийПереоценки.Переоценка");	
				
		СтрокаДвижений.КурсоваяРазница = ?(СтрокаДвижений.КурсоваяРазница>0, СтрокаДвижений.КурсоваяРазница, -СтрокаДвижений.КурсоваяРазница);	
	КонецЦикла; 
	
	Движения.УстановитьАктивность(Истина);
	Движения.Записывать = Истина;

	Попытка
		ДокОбъект.Записать();
		СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
		СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
		СтрокаЗагруженныхДокументов.ОбщаяСумма = ТЗКурсовыхРазниц.Итог("КурсоваяРазница");
		
		ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Активность = Истина;
		ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
		ЗаписьРегистра.СчетSAP = СчетСАП;
		ЗаписьРегистра.Записать(Истина);
		
		ЗаполнитьАналитическийУчетКорректировки(ДокОбъект);
	Исключение
		ДобавитьОшибку("Не удалось записать новый документ корректировки записей регитстров для курсовых разниц", ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
			
КонецПроцедуры
 
Функция ПолучитьПараметрыДокРасчетов() 
	
	ПараметрыДокРасчетов = Новый Структура;
	ПараметрыДокРасчетов.Вставить("НомерСтрокиФайла");
	ПараметрыДокРасчетов.Вставить("Организация");
	ПараметрыДокРасчетов.Вставить("Контрагент");
	ПараметрыДокРасчетов.Вставить("ДоговорКонтрагента");
	ПараметрыДокРасчетов.Вставить("ВалютаДокумента");
	ПараметрыДокРасчетов.Вставить("Номер");
	ПараметрыДокРасчетов.Вставить("Дата");
	ПараметрыДокРасчетов.Вставить("ДатаВходящегоДокумента");
	ПараметрыДокРасчетов.Вставить("НомерВходящегоДокумента");
	ПараметрыДокРасчетов.Вставить("ГПН_ДатаВходящейСФ");
	ПараметрыДокРасчетов.Вставить("ГПН_НомерВходящейСФ");
	ПараметрыДокРасчетов.Вставить("ГПН_КодSAP");
	ПараметрыДокРасчетов.Вставить("ГПН_КодSAP_СФ");
	ПараметрыДокРасчетов.Вставить("Комментарий");
	
	Возврат ПараметрыДокРасчетов;
	
КонецФункции

Процедура ЗаполнитьПараметрыДокРасчетов(ПараметрыДокРасчетов, СтрокаДанных, СтрокаДокумента, КонтекстЗагрузки) 
	
	//Автоматическая нумерация
	//ПараметрыДокРасчетов.Номер 					= СтрокаДанных.ДанныеФайла_ДокРасчетовНомер;
	ПараметрыДокРасчетов.Дата 						= СтрокаДанных.ДанныеФайла_ДокРасчетовДата;
	ПараметрыДокРасчетов.НомерСтрокиФайла			= СтрокаДанных.НомерСтроки;
	ПараметрыДокРасчетов.Организация 				= КонтекстЗагрузки.ПостоянныеДанные.Организация;
	ПараметрыДокРасчетов.Контрагент 				= СтрокаДокумента.Контрагент;	
	ПараметрыДокРасчетов.ДоговорКонтрагента 		= СтрокаДокумента.ДоговорКонтрагента;	
	ПараметрыДокРасчетов.ВалютаДокумента 			= СтрокаДокумента.ВалютаВзаиморасчетов;
	ПараметрыДокРасчетов.НомерВходящегоДокумента 	= СтрокаДанных.ДанныеФайла_ДокРасчетовНомер;
	ПараметрыДокРасчетов.ДатаВходящегоДокумента 	= СтрокаДанных.ДанныеФайла_ДокРасчетовДата;
	ПараметрыДокРасчетов.ГПН_КодSAP 				= СтрокаДанных.ДанныеФайла_ДокРасчетовКодСАП;
	ПараметрыДокРасчетов.ГПН_КодSAP_СФ 				= СтрокаДанных.ДанныеФайла_СФКодСАП;
	ПараметрыДокРасчетов.ГПН_ДатаВходящейСФ 		= СтрокаДанных.ДанныеФайла_СФНомер;
	ПараметрыДокРасчетов.ГПН_НомерВходящейСФ		= СтрокаДанных.ДанныеФайла_СФДата;
	ПараметрыДокРасчетов.Комментарий 				= "Создан автоматически обработкой по загрузке нач. остатков";	
	
КонецПроцедуры

Процедура ЗагрузитьРасчетыСПодотчетниками(КонтекстЗагрузки, ДанныеФайла) 
	
	
КонецПроцедуры

Процедура ЗагрузитьРасчетыПоРезервам(КонтекстЗагрузки, ДанныеФайла) 
	
	
КонецПроцедуры

//ОС

Процедура ЗагрузитьОсновныеСредства(КонтекстЗагрузки, ДанныеФайла) 
		
	ШаблонКомментария =  "Загрузка начальных остатков. Раздел: "+ КонтекстЗагрузки.ПредставлениеШаблона
	+", Счет SAP: %1";
	Запрос = Новый Запрос;
	
	МассивЦФО = ДанныеФайла.ВыгрузитьКолонку("ДанныеБазы_ЦФО");
	МассивЦФО = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивЦФО);
	
	МассивМВЗ = ДанныеФайла.ВыгрузитьКолонку("ДанныеБазы_МВЗ");
	МассивМВЗ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивМВЗ);
	
	Темп = ДанныеФайла.ВыгрузитьКолонку("ДанныеФайла_СчетУчетаКодСАП");	
	Темп = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Темп);
	МассивСчетовСАП = Новый Массив; 
	Для каждого СчетSAP Из Темп Цикл
		МассивСчетовСАП.Добавить(УдалитьПробелы(СчетSAP));
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	Запрос.УстановитьПараметр("Организация", КонтекстЗагрузки.ПостоянныеДанные.Организация);
	Запрос.УстановитьПараметр("МассивЦФО", МассивЦФО);
	Запрос.УстановитьПараметр("МассивМВЗ", МассивМВЗ);
	Запрос.УстановитьПараметр("СчетаSAP", МассивСчетовСАП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковОС.Ссылка,
	|	ВводНачальныхОстатковОС.Подразделение КАК ЦФО,
	|	ВводНачальныхОстатковОС.ПодразделениеОрганизации КАК МВЗ,
	|	ЕСТЬNULL(ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP, """") КАК СчетSAP
	|ИЗ
	|	Документ.ВводНачальныхОстатковОС КАК ВводНачальныхОстатковОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО ВводНачальныхОстатковОС.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков
	|ГДЕ
	|	ВводНачальныхОстатковОС.Дата = &Дата
	|	И ВводНачальныхОстатковОС.Организация = &Организация
	|	И ВводНачальныхОстатковОС.Подразделение В(&МассивЦФО)
	|	И ВводНачальныхОстатковОС.ПодразделениеОрганизации В(&МассивМВЗ)
	|	И ВводНачальныхОстатковОС.ПометкаУдаления = ЛОЖЬ
	|	И ЕСТЬNULL(ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP, """") В (&СчетаSAP)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗДокументыВводаОстатков = РезультатЗапроса.Выгрузить();
	
	//инициализируем все документы ввода остатков для пары ЦФО и МВЗ
	ДокументВводаПоПодразделению = Новый Соответствие;
	
	Для каждого ЦФО Из МассивЦФО Цикл
		Для каждого МВЗ Из МассивМВЗ Цикл
			Для каждого СчетSAP Из МассивСчетовСАП Цикл
				Отбор = Новый Структура("ЦФО, МВЗ, СчетSAP", ЦФО, МВЗ, СчетSAP);
				МассивСтрок = ТЗДокументыВводаОстатков.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество()=0 Тогда
					ДокОбъект = Документы.ВводНачальныхОстатковОС.СоздатьДокумент();
				ИначеЕсли МассивСтрок.Количество()=1 Тогда
					ДокОбъект = МассивСтрок[0].Ссылка.ПолучитьОбъект();
				Иначе 
					ДобавитьОшибку("Найдено более одного документа ввода остатков по ЦФО: "+ЦФО + " и МВЗ: "+МВЗ
						+" и счету SAP: " + СчетSAP + ". Не возможно определить какой обновить, поэтому выбран первый подходящий", "");
					ДокОбъект = МассивСтрок[0].Ссылка.ПолучитьОбъект();
				КонецЕсли; 
				
				ЗаполнитьЗначенияСвойств(ДокОбъект, КонтекстЗагрузки.ПостоянныеДанные);
				
				ДокОбъект.ПометкаУдаления 	= Ложь;	
				ДокОбъект.Комментарий 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетSAP);	
				ДокОбъект.КоррСчет 			= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");	
				ДокОбъект.Ответственный		= Пользователи.ТекущийПользователь();
				ДокОбъект.Проведен			= Ложь;
				
				ДокОбъект.Подразделение = ЦФО;
				ДокОбъект.ПодразделениеОрганизации = МВЗ;			
				
				ДокОбъект.ОС.Очистить();
				ДокОбъект.ДополнительныеСвойства.Вставить("СчетSAP", СчетSAP); 
				
				КлючДляПоиска = Строка(ЦФО.УникальныйИдентификатор())+МВЗ.УникальныйИдентификатор()+СчетSAP;
				ДокументВводаПоПодразделению.Вставить(КлючДляПоиска, ДокОбъект);
			КонецЦикла;	
		КонецЦикла; 
	КонецЦикла; 


	СобытиеПринятияКУчета 		= ПолучитьСоздатьСобытиеПринятия();
	СобытиеВводаВЭксплуатацию 	= ПолучитьСоздатьСобытиеВводаВЭксплуатацию();
		
	Для каждого СтрокаДанных Из ДанныеФайла Цикл
		
		ЦФО = СтрокаДанных.ДанныеБазы_ЦФО;
		МВЗ = СтрокаДанных.ДанныеБазы_МВЗ;
		СчетSAP = УдалитьПробелы(СтрокаДанных.ДанныеФайла_СчетУчетаКодСАП);
		
		ДокОбъект = ДокументВводаПоПодразделению.Получить(Строка(ЦФО.УникальныйИдентификатор())
			+МВЗ.УникальныйИдентификатор()+СчетSAP);
			
		СтрокаОС = ДокОбъект.ОС.Добавить();
		
		СтрокаОС.ОсновноеСредство = СтрокаДанных.ДанныеБазы_ОС;
		
		СтрокаОС.ИнвентарныйНомерРегл		= СтрокаДанных.ДанныеФайла_Код;
		СтрокаОС.ДатаПринятияКУчету			= СтрокаДанных.ДанныеФайла_ДатаПринятияКУчетуРегл;
		СтрокаОС.ДатаПринятияКУчетуРегл		= СтрокаОС.ДатаПринятияКУчету;
		СтрокаОС.ДатаВводаВЭксплуатацию		= СтрокаОС.ДатаПринятияКУчету;
		СтрокаОС.ДатаВводаВЭксплуатациюРегл	= СтрокаОС.ДатаПринятияКУчету;
		
		СтрокаОС.СобытиеПринятияКУчету 		= СобытиеПринятияКУчета;
		СтрокаОС.СобытиеПринятияКУчетуРегл 	= СобытиеПринятияКУчета;
		
		СтрокаОС.НазваниеДокументаПринятияКУчету 		= СтрокаДанных.ДанныеФайла_ДокПринятияКУчетуИмя;
		СтрокаОС.НомерДокументаПринятияКУчету 			= СтрокаДанных.ДанныеФайла_ДокПринятияКУчетуНомер;
		СтрокаОС.НазваниеДокументаПринятияКУчетуРегл 	= СтрокаОС.НазваниеДокументаПринятияКУчету;
		СтрокаОС.НомерДокументаПринятияКУчетуРегл 		= СтрокаОС.НомерДокументаПринятияКУчету;
		СтрокаОС.НомерДокументаВводаВЭксплуатацию		= СтрокаОС.НомерДокументаПринятияКУчету;	
		СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл	= СтрокаОС.НомерДокументаПринятияКУчету;	
		СтрокаОС.НазваниеДокументаВводаВЭксплуатацию	= СтрокаОС.НазваниеДокументаПринятияКУчету;	
		СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл= СтрокаОС.НазваниеДокументаПринятияКУчету;	
		
		СтрокаОС.СпособПоступленияБУ					= СтрокаДанных.ДанныеБазы_СпособПоступленияАктивов;
															
		СтрокаОС.СобытиеВводВЭксплуатацию 		= СобытиеВводаВЭксплуатацию;
		СтрокаОС.СобытиеВводВЭксплуатациюРегл 	= СобытиеВводаВЭксплуатацию;
		
		СтрокаОС.ПервоначальнаяСтоимостьБУ		= СтрокаДанных.ДанныеФайла_ПервоначальнаяСтоимостьБУ;
		СтрокаОС.ПервоначальнаяСтоимостьНУ		= СтрокаДанных.ДанныеФайла_ПервоначальнаяСтоимостьНУ;
		СтрокаОС.НакопленнаяАмортизацияБУ		= СтрокаДанных.ДанныеФайла_НакопленнаяАмортизацияБУ;
		СтрокаОС.НакопленнаяАмортизацияНУ		= СтрокаДанных.ДанныеФайла_НакопленнаяАмортизацияНУ;
		СтрокаОС.ТекущаяСтоимостьБУ				= СтрокаДанных.ДанныеФайла_ТекущаяСтоимостьБУ;
		СтрокаОС.СрокПолезногоИспользованияБУ	= СтрокаДанных.ДанныеФайла_СрокПолезногоИспользованияБУ;
		СтрокаОС.СрокПолезногоИспользованияНУ	= СтрокаДанных.ДанныеФайла_СрокПолезногоИспользованияНУ;
			
		СтрокаОС.ПервоначальнаяСтоимость 	= СтрокаОС.ПервоначальнаяСтоимостьБУ;
		СтрокаОС.НакопленнаяАмортизация 	= СтрокаОС.ПервоначальнаяСтоимостьБУ;
		СтрокаОС.ТекущаяСтоимость 			= СтрокаОС.ТекущаяСтоимостьБУ;
		СтрокаОС.ТекущаяСтоимостьНУ			= СтрокаОС.ТекущаяСтоимостьБУ;
		СтрокаОС.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияБУ;
		
		СтрокаОС.СчетАмортизацииБУ 	= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияОС_01");
		СтрокаОС.СчетАмортизацииНУ 	= ПредопределенноеЗначение("ПланСчетов.Налоговый.АмортизацияОС_01");
		
		СтрокаОС.СчетУчетаБУ 		= ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОСвОрганизации");
		СтрокаОС.СчетУчетаНУ 		= ПредопределенноеЗначение("ПланСчетов.Налоговый.ОСвОрганизации");
		
		СтрокаОС.МОЛ 				= СтрокаДанных.ДанныеБазы_МОЛ;
		СтрокаОС.МОЛРегл			= СтрокаОС.МОЛ;
		
		СтрокаОС.НачислятьАмортизацию 	= Истина;
		СтрокаОС.НачислятьАмортизациюБУ = Истина;
		СтрокаОС.НачислятьАмортизациюНУ = Истина;
		
		СтрокаОС.СпособНачисленияАмортизации 	= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный"); 
		СтрокаОС.СпособНачисленияАмортизацииБУ 	= СтрокаОС.СпособНачисленияАмортизации;
		СтрокаОС.МетодНачисленияАмортизацииНУ	= ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный");
		
		СтрокаОС.СрокИспользованияДляВычисленияАмортизации 	= СтрокаОС.СрокПолезногоИспользованияБУ;
		СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ= СтрокаОС.СрокПолезногоИспользованияБУ;
		СтрокаОС.СпециальныйКоэффициентНУ = 1;
		СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = 
			ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
			
		СтрокаОС.СпособОтраженияРасходовПоАмортизации 	= СтрокаДанных.ДанныеБазы_СпособОтраженияРасходов;
		СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ = СтрокаОС.СпособОтраженияРасходовПоАмортизации; 
	КонецЦикла;	
	
	//Запись документов
	Если НЕ КонтекстЗагрузки.ТолькоПоиск Тогда
		Для каждого КлючЗначение Из ДокументВводаПоПодразделению Цикл
			ДокОбъект = КлючЗначение.Значение;	
			
			Если ДокОбъект.ОС.Количество()>0 Тогда
				Попытка
					РежимЗаписи = ?(ДокОбъект.ЭтоНовый(), РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.ОтменаПроведения); 
					ДокОбъект.Записать(РежимЗаписи);
					
					СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
					СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
					СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.ОС.Итог("ПервоначальнаяСтоимость");
					
					ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.Активность = Истина;
					ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
					ЗаписьРегистра.СчетSAP = ДокОбъект.ДополнительныеСвойства.СчетSAP;
					ЗаписьРегистра.Записать(Истина);
				Исключение
					ДобавитьОшибку("Не удалось записать новый документ ввода начальных остатков по ОС", ОписаниеОшибки());
				КонецПопытки; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьМВЗПоМэппингу(КодМВЗ, МэппингМВЗ, НомерСтроки=0) 
		
	МВЗ = МэппингМВЗ.Получить(УдалитьПробелы(КодМВЗ));
	Если МВЗ = Неопределено Тогда
		ДобавитьОшибку("Не найдено МВЗ согласно мэппингу по коду SAP", КодМВЗ, НомерСтроки);
		МВЗ = ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
	КонецЕсли;
	
	Возврат МВЗ;
	
КонецФункции
 
Функция ПолучитьМэппингМВЗ(КонтекстЗагрузки) 
		
	МэппингМВЗ = Новый Соответствие; 
	
	ТаблицаExcel = ЗагрузитьМетодом_MSEXCEL(КонтекстЗагрузки.ИмяФайла, КонтекстЗагрузки.ПостоянныеДанные.НомерЛистаСМэппингомМВЗ, 0,
		2, КонтекстЗагрузки.КонечнаяСтрока, 0);	
		
	СписокКолонок = "НомерСтроки, N1, N4";
	
	ДанныеМэппинга =  ТаблицаExcel.Скопировать(, СписокКолонок);
	
	Для каждого СтрокаДанных Из ДанныеМэппинга Цикл
		Ошибки = Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N1) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код МВЗ SAP в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли; 		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N4) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код МВЗ (Подразделение организацие) 1с в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли;
		
		Если Не Ошибки Тогда
			КодСАП = УдалитьПробелы(СтрокаДанных.N1);
			МВЗ = ПолучитьПодразделениеМВЗ(СтрокаДанных.N4);
			Если ЗначениеЗаполнено(МВЗ)  Тогда
				МэппингМВЗ.Вставить(КодСАП, МВЗ);	
			Иначе 
				ДобавитьОшибку("Не удалось найти МВЗ (Подразделение организацие) по коду 1с ", СтрокаДанных.N4);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МэппингМВЗ;
	
КонецФункции
 
Функция ПолучитьСпособОтраженияРасходов(ПодразделениеОрганизации, Подразделение, Организация, СтатьяЗатрат, НомерСтроки) 
	
	//Проверить заполнение
	Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) 
		ИЛИ Не ЗначениеЗаполнено(Подразделение) 
		ИЛИ Не ЗначениеЗаполнено(Организация) 
		ИЛИ Не ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		Данные = 	"
					|МВЗ: %1
					|ЦФО: %2
					|Организация: %3
					|Статья затрат: %4";
		Данные = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Данные,
			ПодразделениеОрганизации, Подразделение, Организация, СтатьяЗатрат);			
		ДобавитьОшибку("Способ отражения расходов по амортизации не создан/найден, так как не все данные были найдены на предыдущих этапах", Данные, НомерСтроки);
		Возврат ПредопределенноеЗначение("Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка");	
	КонецЕсли; 
	
	//Инициализация кэша
	Если НЕ Кэш.Свойство("РодительДляСпособаОтражения") Тогда
		НаименованиеГруппы = "КЦ ГПН Аэро";
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("НаименованиеГруппы", НаименованиеГруппы);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпособыОтраженияРасходовПоАмортизации.Ссылка
		|ИЗ
		|	Справочник.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
		|ГДЕ
		|	СпособыОтраженияРасходовПоАмортизации.ЭтоГруппа = ИСТИНА
		|	И СпособыОтраженияРасходовПоАмортизации.Родитель = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)
		|	И СпособыОтраженияРасходовПоАмортизации.Наименование = &НаименованиеГруппы";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			СсылкаНаГруппу = Выборка.ссылка;
		Иначе 
			ГруппаОб = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьГруппу();
			ГруппаОб.Наименование = НаименованиеГруппы;
			ГруппаОб.Записать();
			СсылкаНаГруппу = ГруппаОб.Ссылка;
		КонецЕсли;
		
		Кэш.Вставить("РодительДляСпособаОтражения", СсылкаНаГруппу);
	КонецЕсли; 				
	
	Если Не Кэш.Свойство("СпособыОтражения") Тогда
		
		Кэш.Вставить("СпособыОтражения", Новый Соответствие);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СтатьяЗатрат", СтатьяЗатрат);
		Запрос.УстановитьПараметр("Родитель", Кэш.РодительДляСпособаОтражения);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка,
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.СтатьяЗатрат,
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.Подразделение,
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации,
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Организация
		|ИЗ
		|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
		|ГДЕ
		|	СпособыОтраженияРасходовПоАмортизацииСпособы.Подразделение = &Подразделение
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.ПодразделениеОрганизации = &ПодразделениеОрганизации
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.СтатьяЗатрат = &СтатьяЗатрат
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Организация = &Организация
		|	И СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка.Родитель = &Родитель";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			КлючПоиска =  Строка(Выборка.ПодразделениеОрганизации.УникальныйИдентификатор())
						+ Выборка.Подразделение.УникальныйИдентификатор()
						+ Выборка.Организация.УникальныйИдентификатор()
						+ Выборка.СтатьяЗатрат.УникальныйИдентификатор();
						
			Кэш.СпособыОтражения.Вставить(КлючПоиска, Выборка.Ссылка);			
		КонецЦикла; 
		
	КонецЕсли; 
	
	КлючПоиска =  Строка(ПодразделениеОрганизации.УникальныйИдентификатор())
				+ Подразделение.УникальныйИдентификатор()
				+ Организация.УникальныйИдентификатор()
				+ СтатьяЗатрат.УникальныйИдентификатор();
				
				
	СпособОтражения = Кэш.СпособыОтражения.Получить(КлючПоиска);			
	
	Если СпособОтражения=Неопределено Тогда
		ОбъектСпособОтражения = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
		Наименование = "Амортизация ОС <%1/%2>";
		ОбъектСпособОтражения.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Наименование,
			"26", Строка(ПодразделениеОрганизации));
		ОбъектСпособОтражения.Родитель = Кэш.РодительДляСпособаОтражения;
		ОбъектСпособОтражения.Комментарий = "Создан автоматически при вводе нач. остатков по ОС";
		ОбъектСпособОтражения.Организация = Организация;
		ОбъектСпособОтражения.СпособРаспределенияЗатратНаВыпуск =
			ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыпуск.ПоНормативам");
		СтрокаСпособа = ОбъектСпособОтражения.Способы.Добавить();
		СтрокаСпособа.Коэффициент = 1;
		СтрокаСпособа.Подразделение = Подразделение;
		СтрокаСпособа.ПодразделениеОрганизации = ПодразделениеОрганизации;
		СтрокаСпособа.СтатьяЗатрат = СтатьяЗатрат;
		СтрокаСпособа.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД");
		СтрокаСпособа.СчетЗатратНУ = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД");
		
		Попытка
			ОбъектСпособОтражения.Записать();
			СпособОтражения = ОбъектСпособОтражения.Ссылка;
		Исключение
			ДобавитьОшибку("Не удалось записать способ отражения амортизации ", ОписаниеОшибки(), НомерСтроки);
			СпособОтражения = ПредопределенноеЗначение("Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка");
		КонецПопытки;	
		
		Кэш.СпособыОтражения.Вставить(КлючПоиска, СпособОтражения);		
	КонецЕсли; 			
				                                                                                       
	Возврат СпособОтражения;
	
КонецФункции

Функция ПолучитьДанныеМэппингаСтатейЗатрат(КонтекстЗагрузки) 
	
	МэппингСтатей = Новый Соответствие; 
	
	ТаблицаExcel = ЗагрузитьМетодом_MSEXCEL(КонтекстЗагрузки.ИмяФайла, КонтекстЗагрузки.ПостоянныеДанные.НомерЛистаСМэппингомСтатейЗатрат, 0,
		2, КонтекстЗагрузки.КонечнаяСтрока, 0);	
		
	СписокКолонок = "НомерСтроки, N1, N4";
	
	ДанныеМэппинга =  ТаблицаExcel.Скопировать(, СписокКолонок);
	
	Для каждого СтрокаДанных Из ДанныеМэппинга Цикл
		Ошибки = Ложь;
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N1) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код статьи затрат SAP в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли; 		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.N4) Тогда
			Ошибки = Истина;
			ДобавитьОшибку("Не заполнен код статьи 1с в мэппинге в строке", СтрокаДанных.НомерСтроки);
		КонецЕсли;
		
		Если Не Ошибки Тогда
			СчетSAP = УдалитьПробелы(СтрокаДанных.N1);
			СтатьяЗатрат = ПолучитьСтатьюЗатрат(СтрокаДанных.N4);
			Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				МэппингСтатей.Вставить(СчетSAP, СтатьяЗатрат);	
			Иначе 
				ДобавитьОшибку("Не удалось определить ссылка на статья затрат по коду 1с в мэппинге в строке", СтрокаДанных.НомерСтроки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МэппингСтатей;
	
КонецФункции
 
Функция ПолучитьСоздатьСобытиеПринятия() 
	
	Наименование = "Принятие к учету";
	СобытиеСсылка = Справочники.СобытияОС.НайтиПоНаименованию(Наименование,Истина);
	Если Не ЗначениеЗаполнено(СобытиеСсылка) Тогда
		СобытиеОбъект = Справочники.СобытияОС.СоздатьЭлемент();
		СобытиеОбъект.Наименование = Наименование;
		СобытиеОбъект.ВидСобытияОС = ПредопределенноеЗначение("Перечисление.ВидыСобытийОС.ПринятиеКУчету"); 
		СобытиеОбъект.Записать();
		СобытиеСсылка = СобытиеОбъект.Ссылка;
	КонецЕсли; 
	
	Возврат СобытиеСсылка;
	
КонецФункции

Функция ПолучитьСоздатьСобытиеВводаВЭксплуатацию() 
	
	Наименование = "Ввод в эксплуатацию";
	СобытиеСсылка = Справочники.СобытияОС.НайтиПоНаименованию(Наименование,Истина);
	Если Не ЗначениеЗаполнено(СобытиеСсылка) Тогда
		СобытиеОбъект = Справочники.СобытияОС.СоздатьЭлемент();
		СобытиеОбъект.Наименование = Наименование;
		СобытиеОбъект.ВидСобытияОС = ПредопределенноеЗначение("Перечисление.ВидыСобытийОС.ВводВЭксплуатацию"); 
		СобытиеОбъект.Записать();
		СобытиеСсылка = СобытиеОбъект.Ссылка;
	КонецЕсли; 
	
	Возврат СобытиеСсылка;
	
КонецФункции

Функция НайтиСоздатьОС(Параметры, КонтекстЗагрузки) 
	
	ОсновноеСредство = Кэш.ОС.Получить(УдалитьЛидируюшиеНули(Параметры.ДанныеФайла_Код));
	
	Если ОсновноеСредство<>Неопределено Тогда
		ОСОбъект = ОсновноеСредство.ПолучитьОбъект();
	Иначе 
		ОСОбъект = Справочники.ОсновныеСредства.СоздатьЭлемент();
	КонецЕсли;
	
    ОСОбъект.Код = Параметры.ДанныеФайла_Код;
    ОСОбъект.Наименование = Параметры.ДанныеФайла_Наименование;
    ОСОбъект.НаименованиеПолное = Параметры.ДанныеФайла_НаименованиеПолное;
    ОСОбъект.Автотранспорт = Параметры.ДанныеФайла_Автотранспорт;
    ОСОбъект.ДатаВыпуска = Параметры.ДанныеФайла_ДатаВыпуска;
    ОСОбъект.ЗаводскойНомер = Параметры.ДанныеФайла_ЗаводскойНомер;
    ОСОбъект.Изготовитель = Параметры.ДанныеФайла_Изготовитель;
    ОСОбъект.Комментарий = Параметры.ДанныеФайла_Комментарий;
    ОСОбъект.НомерПаспорта = Параметры.ДанныеФайла_НомерПаспорта;
    ОСОбъект.АдресМестонахождения = Параметры.ДанныеФайла_АдресМестонахождения;
    ОСОбъект.КодРегиона = Параметры.ДанныеФайла_КодРегиона;
    ОСОбъект.Помещение = Параметры.ДанныеФайла_Помещение;
    ОСОбъект.НазначениеПомещения = Параметры.ДанныеФайла_НазначениеПомещения;
    ОСОбъект.КодРегиона = Параметры.ДанныеФайла_КодРегиона;
	
	ОСОбъект.ГПН_Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
	ОСОбъект.ГруппаОС = ?(ЗначениеЗаполнено(Параметры.ДанныеФайла_ГруппыОССтрокой),
		ПолучитьЗначениеПеречисления("ГруппыОС", Параметры.ДанныеФайла_ГруппыОССтрокой, Параметры.НомерСтроки), 
		ПредопределенноеЗначение("Перечисление.ГруппыОС.ПустаяСсылка"));
	ОСОбъект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектОС");
		
	СчетУчетаСАП = УдалитьПробелы(Параметры.ДанныеФайла_СчетУчетаКодСАП);
	Если ЗначениеЗаполнено(СчетУчетаСАП) Тогда
		ОСОбъект.Родитель = КонтекстЗагрузки.ГруппаПоСчету1с.Получить(СчетУчетаСАП);
		Если НЕ ЗначениеЗаполнено(ОСОбъект.Родитель) Тогда
			ДобавитьОшибку("В ТЗ не определено группы (папки) справочника ОС для указанного счета ", СчетУчетаСАП, Параметры.НомерСтроки);
			ОСОбъект.Родитель = КонтекстЗагрузки.ГруппаПоСчету1с.Получить("Корень");
		КонецЕсли; 
	Иначе	
		ОСОбъект.Родитель = КонтекстЗагрузки.ГруппаПоСчету1с.Получить("Корень");
		ДобавитьОшибку("Не заполнен счет учета ОС, группа не определена", "", Параметры.НомерСтроки);
	КонецЕсли; 	
	                                                                          
	ОСОбъект.КодПоОКОФ = ПолучитьОКОФ(Параметры.ДанныеФайла_ОКОФ);
			
	ОСОбъект.АмортизационнаяГруппа = ПолучитьАмортизационнуюГруппу(Параметры.ДанныеФайла_АмортизационнаяГруппаСтрокой);
	ОСОбъект.ГПН_Движимое = ?(Найти(НРЕГ(Параметры.ДанныеФайла_Движимое), "движемое")>0, Истина, Ложь);
	Если Параметры.ДанныеФайла_ВидНомера="" ИЛИ Найти(НРег(Параметры.ДанныеФайла_ВидНомера), "кадаст")>0 Тогда
		ОСОбъект.КадастровыйНомер = Параметры.ДанныеФайла_КадастровыйНомер;
	Иначе 
		ОСОбъект.УсловныйНомер = Параметры.ДанныеФайла_КадастровыйНомер;
	КонецЕсли; 
	
	ОСОбъект.НазначениеПомещения = ?(ЗначениеЗаполнено(Параметры.ДанныеФайла_НазначениеПомещения),
		ПолучитьЗначениеПеречисления("НазначенияПомещения", Параметры.ДанныеФайла_НазначениеПомещения, Параметры.НомерСтроки), 
		ПредопределенноеЗначение("Перечисление.НазначенияПомещения.ПустаяСсылка"));
	
	Попытка
		Если НЕ КонтекстЗагрузки.ТолькоПоиск Тогда
			ОСОбъект.Записать();
			ОсновноеСредство = ОСОбъект.Ссылка;
			Кэш.ОС.Вставить(ОСОбъект.Код, ОсновноеСредство);
		КонецЕсли; 
	Исключение
		ДобавитьОшибку("Не удалось записать новое ОС", ОписаниеОшибки(), Параметры.НомерСтроки);
		ОсновноеСредство = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");
	КонецПопытки; 
			
	Возврат ОсновноеСредство;
	
КонецФункции

Функция ПолучитьАмортизационнуюГруппу(ГруппаСтрокой) 
	
	Если ГруппаСтрокой="01" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ПерваяГруппа");
	ИначеЕсли ГруппаСтрокой="02" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ВтораяГруппа");
	ИначеЕсли ГруппаСтрокой="03" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ТретьяГруппа");
	ИначеЕсли ГруппаСтрокой="04" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ЧетвертаяГруппа");
	ИначеЕсли ГруппаСтрокой="05" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ПятаяГруппа");
	ИначеЕсли ГруппаСтрокой="06" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ШестаяГруппа");
	ИначеЕсли ГруппаСтрокой="07" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.СедьмаяГруппа");
	ИначеЕсли ГруппаСтрокой="08" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ВосьмаяГруппа");
	ИначеЕсли ГруппаСтрокой="09" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ДевятаяГруппа");
	ИначеЕсли ГруппаСтрокой="10" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ДесятаяГруппа");
	ИначеЕсли ГруппаСтрокой="отд" Тогда
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа");
	Иначе 
		Значение = ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ПустаяСсылка");
		ДобавитьОшибку("Не найдено значение амортизационной группы по коду", ГруппаСтрокой);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
 
Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ЗначениеСтрокой, НомерСтроки=0) 
	
	МетаданныеПеречисления = Метаданные.Перечисления.Найти(ИмяПеречисления);
	
	Если МетаданныеПеречисления<>Неопределено Тогда
		Если МетаданныеПеречисления.ЗначенияПеречисления.Найти(ЗначениеСтрокой)<>Неопределено Тогда
			Значение = Перечисления[ИмяПеречисления][ЗначениеСтрокой];
		Иначе 
			Значение = Неопределено;
			ДобавитьОшибку("Не найдено значение перечисления "+ИмяПеречисления + " по строковому значению ", """"+ЗначениеСтрокой+"""", НомерСтроки);
		КонецЕсли; 
	Иначе 
		Значение = Неопределено;
		ДобавитьОшибку("Не найдено указанное перечисление в конфигурации "+ИмяПеречисления, "", НомерСтроки);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьСозадатьИерархиюДляОС() 
	
	Результат = Новый Соответствие; 
	
	НаименованиеКореннойПапки = "ОС ГО ГПН Аэро";
	Корень = Справочники.ОсновныеСредства.НайтиПоНаименованию(НаименованиеКореннойПапки, истина,
		ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка"));
	Если Не ЗначениеЗаполнено(Корень) Тогда
		Группа = Справочники.ОсновныеСредства.СоздатьГруппу();
		Группа.Наименование = НаименованиеКореннойПапки;
		Группа.Записать();
		Результат.Вставить("Корень", Группа.Ссылка);
	Иначе 
		Результат.Вставить("Корень", Корень);
	КонецЕсли; 
	
	ПапкиДляСоздания = Новый СписокЗначений;	
	ПапкиДляСоздания.Добавить("140000000", "Машины и оборудование");
	ПапкиДляСоздания.Добавить("150000000", "Транспортные средства");
	ПапкиДляСоздания.Добавить("160000000", "Производственный инвентарь");
	ПапкиДляСоздания.Добавить("170500000", "Прочие ОС");
	ПапкиДляСоздания.Добавить("J000010000", "Арендованные ОС");
	
    МассивИмен = Новый Массив;
	МассивИмен.Добавить(НаименованиеКореннойПапки);
	Для каждого ЭлементСЗ Из ПапкиДляСоздания Цикл
		МассивИмен.Добавить(ЭлементСЗ.Представление);
	КонецЦикла;
			
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("МассивИмен", МассивИмен);
	Запрос.УстановитьПараметр("Родитель", Результат.Получить("Корень"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка,
	|	ОсновныеСредства.Наименование
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ЭтоГруппа = ИСТИНА
	|	И ОсновныеСредства.Наименование В(&МассивИмен)
	|	И ОсновныеСредства.Родитель = &Родитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Для каждого ЭлементСЗ Из ПапкиДляСоздания Цикл
		
		КодСчетаСАП = ЭлементСЗ.Значение;
		НаименованиеГруппы = ЭлементСЗ.Представление;
		
		СтрокаТЗ = ТЗ.Найти(НаименованиеГруппы, "Наименование");
		Если СтрокаТЗ=Неопределено Тогда
			Группа = Справочники.ОсновныеСредства.СоздатьГруппу();
			Группа.Наименование = НаименованиеГруппы;
			Группа.Родитель = Результат.Получить("Корень");
			Группа.Записать();
			Результат.Вставить(КодСчетаСАП, Группа.Ссылка);
		Иначе 
			Результат.Вставить(КодСчетаСАП, СтрокаТЗ.Ссылка);
		КонецЕсли; 
	КонецЦикла;	 
	
	Возврат Результат;
	
КонецФункции

//НМА	

Процедура ЗагрузитьНМА(КонтекстЗагрузки, ДанныеФайла)
		
	ШаблонКомментария =  "Загрузка начальных остатков. Раздел: "+ КонтекстЗагрузки.ПредставлениеШаблона
	+", Счет SAP: %1";
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	Запрос.УстановитьПараметр("Организация", КонтекстЗагрузки.ПостоянныеДанные.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПринятиеКУчетуНМА.Ссылка,
	|	ПринятиеКУчетуНМА.НематериальныйАктив,
	|	ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА КАК ПринятиеКУчетуНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО ПринятиеКУчетуНМА.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков
	|ГДЕ
	|	ПринятиеКУчетуНМА.Дата = &Дата
	|	И ПринятиеКУчетуНМА.ПометкаУдаления = ЛОЖЬ
	|	И ПринятиеКУчетуНМА.Организация = &Организация
	|	И НЕ ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ЗагруженнныеДокументыНМА = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ЗагруженнныеДокументыНМА.Вставить(Выборка.НематериальныйАктив, Выборка.Ссылка);		
	КонецЦикла; 
		
	ТЗНакопленнойАмортизации = Новый ТаблицаЗначений;
	ТЗНакопленнойАмортизации.Колонки.Добавить("СчетSAP");
	ТЗНакопленнойАмортизации.Колонки.Добавить("Комментарий");
	ТЗНакопленнойАмортизации.Колонки.Добавить("НМА");
	ТЗНакопленнойАмортизации.Колонки.Добавить("АмортизацииБУ", Новый ОписаниеТипов("Число",
															   Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗНакопленнойАмортизации.Колонки.Добавить("АмортизацииНУ", Новый ОписаниеТипов("Число",
															   Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Для каждого СтрокаДанных Из ДанныеФайла Цикл
		
		НМА = СтрокаДанных.ДанныеБазы_НМА;
		
		ДокСсылка = ЗагруженнныеДокументыНМА.Получить(НМА);
		Если ДокСсылка<>Неопределено Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.ПринятиеКУчетуНМА.СоздатьДокумент();
		КонецЕсли;
		
		СчетSAP = УдалитьПробелы(СтрокаДанных.ДанныеФайла_СчетУчетаКодСАП);
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, КонтекстЗагрузки.ПостоянныеДанные);
		
		ДокОбъект.ПометкаУдаления 	= Ложь;	
		ДокОбъект.Комментарий 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетSAP);	
		ДокОбъект.Ответственный		= Пользователи.ТекущийПользователь();
		ДокОбъект.Проведен			= Ложь;
		ДокОбъект.ВидОбъектаУчета 	= ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив");	
		
		ДокОбъект.НематериальныйАктив = НМА;
		ДокОбъект.СчетУчетаБУВнеоборотногоАктива = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");
		
		ДокОбъект.СпособПоступления			= СтрокаДанных.ДанныеБазы_СпособПоступленияАктивов;
		ДокОбъект.СпособОтраженияРасходов 	= СтрокаДанных.ДанныеБазы_СпособОтраженияРасходов;
		
		//Бух учет
		ДокОбъект.СчетУчетаБУ =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НематериальныеАктивыОрганизации");
		ДокОбъект.НачислятьАмортизациюБУ = Истина;
		ДокОбъект.СтоимостьБУ = СтрокаДанных.ДанныеФайла_ПервоначальнаяСтоимостьБУ;
		ДокОбъект.СрокПолезногоИспользованияБУ = СтрокаДанных.ДанныеФайла_СрокПолезногоИспользованияБУ;
		ДокОбъект.СпособНачисленияАмортизацииБУ = 
			ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный");
		ДокОбъект.СчетНачисленияАмортизацииБУ =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов");
			
		//Налоговый учет
		ДокОбъект.СчетУчетаНУ =
			ПредопределенноеЗначение("ПланСчетов.Налоговый.НематериальныеАктивыОрганизации");
		ДокОбъект.НачислятьАмортизациюНУ = Истина;
		ДокОбъект.СтоимостьНУ = СтрокаДанных.ДанныеФайла_ПервоначальнаяСтоимостьБУ;
		ДокОбъект.СрокПолезногоИспользованияНУ = СтрокаДанных.ДанныеФайла_СрокПолезногоИспользованияБУ;
		ДокОбъект.СпособНачисленияАмортизацииНУ = 
			ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный");
		ДокОбъект.СпециальныйКоэффициентНУ = 1;	
		ДокОбъект.СчетНачисленияАмортизацииНУ =
			ПредопределенноеЗначение("ПланСчетов.Налоговый.АмортизацияНематериальныхАктивов");
		
		//Амортизации
		СтрокаАмортизации = ТЗНакопленнойАмортизации.Добавить();
		СтрокаАмортизации.НМА 			= ДокОбъект.НематериальныйАктив;
		СтрокаАмортизации.СчетSAP 		= СчетSAP;
		СтрокаАмортизации.Комментарий 	= ДокОбъект.Комментарий;
		СтрокаАмортизации.АмортизацииБУ = СтрокаДанных.ДанныеФайла_НакопленнаяАмортизацияБУ;
		СтрокаАмортизации.АмортизацииНУ = СтрокаДанных.ДанныеФайла_НакопленнаяАмортизацияНУ;
		
		Попытка
			РежимЗаписи = ?(ДокОбъект.ЭтоНовый(), РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.ОтменаПроведения); 
			ДокОбъект.Записать(РежимЗаписи);
			
			СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
			СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
			СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.СтоимостьБУ;
			
			ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Активность = Истина;
			ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
			ЗаписьРегистра.СчетSAP = СчетSAP;
			ЗаписьРегистра.Записать(Истина);
		Исключение
			ДобавитьОшибку("Не удалось записать новый документ ввода начальных остатков по ОС", ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЦикла; 
	
	
	МассивСчетов = ТЗНакопленнойАмортизации.ВыгрузитьКолонку("СчетSAP");
	МассивСчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаЗаписейРегистров.Ссылка,
	|	ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP,
	|	КорректировкаЗаписейРегистров.Дата
	|ИЗ
	|	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО (КорректировкаЗаписейРегистров.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков)
	|ГДЕ
	|	КорректировкаЗаписейРегистров.Дата = &Дата
	|	И КорректировкаЗаписейРегистров.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ДокументыКорректировки = Новый Соответствие; 
	Пока Выборка.Следующий() Цикл
		ДокументыКорректировки.Вставить(Выборка.СчетSAP, Выборка.Ссылка);	
	КонецЦикла; 
	
	Для каждого СчетSAP Из МассивСчетов Цикл
		
		ДокСсылка = ДокументыКорректировки.Получить(СчетSAP);
		Если ДокСсылка<>Неопределено Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		КонецЕсли;
		
		ДокОбъект.Дата 			= КонтекстЗагрузки.ПостоянныеДанные.Дата;
		ДокОбъект.Комментарий 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетSAP);
		ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокОбъект.ГПН_Основание = ДокОбъект.Комментарий;
		
		ДокОбъект.ТаблицаРегистровНакопления.Очистить();
		ДокОбъект.ТаблицаРегистровСведений.Очистить();
		ДокОбъект.ТаблицаРегистровБухгалтерии.Очистить();
		ДокОбъект.ЗаполнениеДвижений.Очистить();
		
		//Накопления
		Регистр = Метаданные.РегистрыНакопления.СтоимостьНМАНалоговыйУчет;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровНакопления.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		Регистр = Метаданные.РегистрыНакопления.СтоимостьНМАБухгалтерскийУчет;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровНакопления.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		//бухгалтерские
		Регистр = Метаданные.РегистрыБухгалтерии.Хозрасчетный;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровБухгалтерии.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		Регистр = Метаданные.РегистрыБухгалтерии.Налоговый;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровБухгалтерии.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		
		ДокОбъект.Движения.СтоимостьНМАБухгалтерскийУчет.Очистить();
		ДокОбъект.Движения.СтоимостьНМАНалоговыйУчет.Очистить();
		ДокОбъект.Движения.Хозрасчетный.Очистить();
		ДокОбъект.Движения.Налоговый.Очистить();
		
		Данные = ТЗНакопленнойАмортизации.НайтиСтроки(Новый Структура("СчетSAP", СчетSAP)); 
		Для каждого СтрокаДанных Из Данные Цикл
			Если СтрокаДанных.АмортизацииБУ>0 Тогда
				//РН СтоимостьНМАБухгалтерскийУчет
				Движения = ДокОбъект.Движения.СтоимостьНМАБухгалтерскийУчет;
				СтрокаДвижений = Движения.ДобавитьПриход();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.НематериальныйАктив = СтрокаДанных.НМА;
				СтрокаДвижений.Амортизация = СтрокаДанных.АмортизацииБУ;
				
				//РБ Хозрасчетный
				Движения = ДокОбъект.Движения.Хозрасчетный;
				СтрокаДвижений = Движения.Добавить();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.СчетКт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов");
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "НематериальныеАктивы", СтрокаДанных.НМА);
				СтрокаДвижений.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");
				СтрокаДвижений.Сумма = СтрокаДанных.АмортизацииБУ;
			КонецЕсли; 
			
			Если СтрокаДанных.АмортизацииНУ>0 Тогда
				//РН СтоимостьНМАНалоговыйУчет
				Движения = ДокОбъект.Движения.СтоимостьНМАНалоговыйУчет;
				СтрокаДвижений = Движения.ДобавитьПриход();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.НематериальныйАктив = СтрокаДанных.НМА;
				СтрокаДвижений.Амортизация = СтрокаДанных.АмортизацииНУ;
				
				//РБ Хозрасчетный
				Движения = ДокОбъект.Движения.Налоговый;
				СтрокаДвижений = Движения.Добавить();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.СчетКт = ПредопределенноеЗначение("ПланСчетов.Налоговый.АмортизацияНематериальныхАктивов");
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "НематериальныеАктивы", СтрокаДанных.НМА);
				СтрокаДвижений.Сумма = СтрокаДанных.АмортизацииБУ;
			КонецЕсли; 
			
		КонецЦикла; 
		
		ДокОбъект.Движения.СтоимостьНМАБухгалтерскийУчет.Записывать = Истина;
		ДокОбъект.Движения.СтоимостьНМАНалоговыйУчет.Записывать = Истина;
		ДокОбъект.Движения.Хозрасчетный.Записывать = Истина;
		ДокОбъект.Движения.Налоговый.Записывать = Истина;

		Попытка
			ДокОбъект.Записать();
			СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
			СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
			СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.Движения.Хозрасчетный.Итог("Сумма");
			
			ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Активность = Истина;
			ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
			ЗаписьРегистра.СчетSAP = СчетSAP;
			ЗаписьРегистра.Записать(Истина);
			
			ЗаполнитьАналитическийУчетКорректировки(ДокОбъект);
		Исключение
			ДобавитьОшибку("Не удалось записать новый документ корректировки записей регистров для курсовых разниц", ОписаниеОшибки());
			Возврат;
		КонецПопытки; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСоздатьНМА(СтрокаДанных, КонтекстЗагрузки) 
	
	Если НЕ Кэш.Свойство("НМА") Тогда
		ИнициализироватьКэшНМА(); 
	КонецЕсли; 
	
	НМА = Кэш.НМА.Получить(СтрокаДанных.ДанныеФайла_Наименование);
	Если НМА = Неопределено  Тогда
		ОбъектНМА = Справочники.НематериальныеАктивы.СоздатьЭлемент();
	Иначе 
		ОбъектНМА = НМА.ПолучитьОбъект();
	КонецЕсли; 
		 
	ОбъектНМА.Наименование = СтрокаДанных.ДанныеФайла_Наименование; 
	ОбъектНМА.НаименованиеПолное = ОбъектНМА.Наименование;
	
	СчетУчетаСАП = УдалитьПробелы(СтрокаДанных.ДанныеФайла_СчетУчетаКодСАП);
	Если ЗначениеЗаполнено(СчетУчетаСАП) Тогда
		ОбъектНМА.Родитель = КонтекстЗагрузки.ГруппаНМАПоСчету1с.Получить(СчетУчетаСАП);
		Если НЕ ЗначениеЗаполнено(ОбъектНМА.Родитель) Тогда
			ДобавитьОшибку("В ТЗ не определено группы (папки) справочника НМА для указанного счета ", СчетУчетаСАП, СтрокаДанных.НомерСтроки);
			ОбъектНМА.Родитель = КонтекстЗагрузки.ГруппаНМАПоСчету1с.Получить("Корень");
		КонецЕсли; 
	Иначе	
		ОбъектНМА.Родитель = КонтекстЗагрузки.ГруппаНМАПоСчету1с.Получить("Корень");
		ДобавитьОшибку("Не заполнен счет учета НМА, группа (папка) не определена", "", СтрокаДанных.НомерСтроки);
	КонецЕсли; 	
	
	ОбъектНМА.ВидНМА = ПолучитьЗначениеПеречисления("ВидыНМА", СтрокаДанных.ДанныеФайла_ВидНМА, СтрокаДанных.НомерСтроки);
	ОбъектНМА.ГПН_ВидНМА_МСФО = ПолучитьЗначениеПеречисления("ГПН_ВидыНМА_МСФО", СтрокаДанных.ДанныеФайла_ВидНМАМСФО, СтрокаДанных.НомерСтроки);
	ОбъектНМА.АмортизационнаяГруппа = ПолучитьЗначениеПеречисления("АмортизационныеГруппы", СтрокаДанных.ДанныеФайла_АмортизационнаяГруппаСтрокой, СтрокаДанных.НомерСтроки);
	ОбъектНМА.ВидОбъектаУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив");
	ОбъектНМА.ГПН_Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
	
	Попытка
		Если НЕ КонтекстЗагрузки.ТолькоПоиск Тогда
			ОбъектНМА.Записать();
			НМА = ОбъектНМА.Ссылка;
			Кэш.НМА.Вставить(ОбъектНМА.Код, НМА);
		КонецЕсли; 
	Исключение
		ДобавитьОшибку("Не удалось записать новое НМА", ОписаниеОшибки(), СтрокаДанных.НомерСтроки);
		НМА = ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка");
	КонецПопытки; 
			
	Возврат НМА;
	
КонецФункции

Процедура ИнициализироватьКэшНМА() 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("", );
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка,
	|	НематериальныеАктивы.Наименование
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Кэш.Вставить("НМА", Новый Соответствие);
	ТекущийКэш = Кэш.НМА; 
	Пока Выборка.Следующий() Цикл
		ТекущийКэш.Вставить(Выборка.Наименование, Выборка.Ссылка);	
	КонецЦикла; 
	
КонецПроцедуры
  
Функция ПолучитьСозадатьИерархиюДляНМА() 
	
	Результат = Новый Соответствие; 
	
	НаименованиеКореннойПапки = "НМА ГО ГПН Аэро";
	Корень = Справочники.НематериальныеАктивы.НайтиПоНаименованию(НаименованиеКореннойПапки, Истина,
		ПредопределенноеЗначение("Справочник.НематериальныеАктивы.ПустаяСсылка"));
	Если Не ЗначениеЗаполнено(Корень) Тогда
		Группа = Справочники.НематериальныеАктивы.СоздатьГруппу();
		Группа.Наименование = НаименованиеКореннойПапки;
		Группа.Записать();
		Результат.Вставить("Корень", Группа.Ссылка);
	Иначе 
		Результат.Вставить("Корень", Корень);
	КонецЕсли; 
	
	ПапкиДляСоздания = Новый СписокЗначений;	
	ПапкиДляСоздания.Добавить("430200000", "Искл право патентообл на изоб, пром обр, пол модель");
	ПапкиДляСоздания.Добавить("430700000", "Исключительные права на ПО и БД (более 12 месяцев)");
	ПапкиДляСоздания.Добавить("470000000", "Прочие НМА");
	ПапкиДляСоздания.Добавить("470700000", "Неисключительные права на ПО и БД (более 12 месяцев)");
	
    МассивИмен = Новый Массив;
	МассивИмен.Добавить(НаименованиеКореннойПапки);
	Для каждого ЭлементСЗ Из ПапкиДляСоздания Цикл
		МассивИмен.Добавить(ЭлементСЗ.Представление);
	КонецЦикла;
			
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("МассивИмен", МассивИмен);
	Запрос.УстановитьПараметр("Родитель", Результат.Получить("Корень"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка,
	|	НематериальныеАктивы.Наименование
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.ЭтоГруппа = ИСТИНА
	|	И НематериальныеАктивы.Наименование В(&МассивИмен)
	|	И НематериальныеАктивы.Родитель = &Родитель";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗ = РезультатЗапроса.Выгрузить();
	

	
	
	Для каждого ЭлементСЗ Из ПапкиДляСоздания Цикл
		
		КодСчетаСАП = ЭлементСЗ.Значение;
		НаименованиеГруппы = ЭлементСЗ.Представление;
		
		СтрокаТЗ = ТЗ.Найти(НаименованиеГруппы, "Наименование");
		Если СтрокаТЗ=Неопределено Тогда
			Группа = Справочники.НематериальныеАктивы.СоздатьГруппу();
			Группа.Наименование = НаименованиеГруппы;
			Группа.Родитель = Результат.Получить("Корень");
			Группа.Записать();
			Результат.Вставить(КодСчетаСАП, Группа.Ссылка);
		Иначе 
			Результат.Вставить(КодСчетаСАП, СтрокаТЗ.Ссылка);
		КонецЕсли; 
	КонецЦикла;	 
	
	Возврат Результат;
	
КонецФункции

//Товары

Процедура ЗагрузитьТовары(КонтекстЗагрузки, ДанныеФайла)
		
	ШаблонКомментария =  "Загрузка начальных остатков. Раздел: "+ КонтекстЗагрузки.ПредставлениеШаблона
	+", Счет SAP: %1";
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	Запрос.УстановитьПараметр("Организация", КонтекстЗагрузки.ПостоянныеДанные.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОприходованиеТоваров.Ссылка,
	|	ОприходованиеТоваров.Подразделение,
	|	ОприходованиеТоваров.Склад,
	|	ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО ПринятиеКУчетуНМА.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков
	|ГДЕ
	|	ПринятиеКУчетуНМА.Дата = &Дата
	|	И ПринятиеКУчетуНМА.ПометкаУдаления = ЛОЖЬ
	|	И ПринятиеКУчетуНМА.Организация = &Организация
	|	И НЕ ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ЗагруженнныеДокументыНМА = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ЗагруженнныеДокументыНМА.Вставить(Выборка.НематериальныйАктив, Выборка.Ссылка);		
	КонецЦикла; 
		
	ТЗНакопленнойАмортизации = Новый ТаблицаЗначений;
	ТЗНакопленнойАмортизации.Колонки.Добавить("СчетSAP");
	ТЗНакопленнойАмортизации.Колонки.Добавить("Комментарий");
	ТЗНакопленнойАмортизации.Колонки.Добавить("НМА");
	ТЗНакопленнойАмортизации.Колонки.Добавить("АмортизацииБУ", Новый ОписаниеТипов("Число",
															   Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	ТЗНакопленнойАмортизации.Колонки.Добавить("АмортизацииНУ", Новый ОписаниеТипов("Число",
															   Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Для каждого СтрокаДанных Из ДанныеФайла Цикл
		
		НМА = СтрокаДанных.ДанныеБазы_НМА;
		
		ДокСсылка = ЗагруженнныеДокументыНМА.Получить(НМА);
		Если ДокСсылка<>Неопределено Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.ПринятиеКУчетуНМА.СоздатьДокумент();
		КонецЕсли;
		
		СчетSAP = УдалитьПробелы(СтрокаДанных.ДанныеФайла_СчетУчетаКодСАП);
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, КонтекстЗагрузки.ПостоянныеДанные);
		
		ДокОбъект.ПометкаУдаления 	= Ложь;	
		ДокОбъект.Комментарий 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетSAP);	
		ДокОбъект.Ответственный		= Пользователи.ТекущийПользователь();
		ДокОбъект.Проведен			= Ложь;
		ДокОбъект.ВидОбъектаУчета 	= ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив");	
		
		ДокОбъект.НематериальныйАктив = НМА;
		ДокОбъект.СчетУчетаБУВнеоборотногоАктива = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");
		
		ДокОбъект.СпособПоступления			= СтрокаДанных.ДанныеБазы_СпособПоступленияАктивов;
		ДокОбъект.СпособОтраженияРасходов 	= СтрокаДанных.ДанныеБазы_СпособОтраженияРасходов;
		
		//Бух учет
		ДокОбъект.СчетУчетаБУ =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НематериальныеАктивыОрганизации");
		ДокОбъект.НачислятьАмортизациюБУ = Истина;
		ДокОбъект.СтоимостьБУ = СтрокаДанных.ДанныеФайла_ПервоначальнаяСтоимостьБУ;
		ДокОбъект.СрокПолезногоИспользованияБУ = СтрокаДанных.ДанныеФайла_СрокПолезногоИспользованияБУ;
		ДокОбъект.СпособНачисленияАмортизацииБУ = 
			ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный");
		ДокОбъект.СчетНачисленияАмортизацииБУ =
			ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов");
			
		//Налоговый учет
		ДокОбъект.СчетУчетаНУ =
			ПредопределенноеЗначение("ПланСчетов.Налоговый.НематериальныеАктивыОрганизации");
		ДокОбъект.НачислятьАмортизациюНУ = Истина;
		ДокОбъект.СтоимостьНУ = СтрокаДанных.ДанныеФайла_ПервоначальнаяСтоимостьБУ;
		ДокОбъект.СрокПолезногоИспользованияНУ = СтрокаДанных.ДанныеФайла_СрокПолезногоИспользованияБУ;
		ДокОбъект.СпособНачисленияАмортизацииНУ = 
			ПредопределенноеЗначение("Перечисление.МетодыНачисленияАмортизации.Линейный");
		ДокОбъект.СпециальныйКоэффициентНУ = 1;	
		ДокОбъект.СчетНачисленияАмортизацииНУ =
			ПредопределенноеЗначение("ПланСчетов.Налоговый.АмортизацияНематериальныхАктивов");
		
		//Амортизации
		СтрокаАмортизации = ТЗНакопленнойАмортизации.Добавить();
		СтрокаАмортизации.НМА 			= ДокОбъект.НематериальныйАктив;
		СтрокаАмортизации.СчетSAP 		= СчетSAP;
		СтрокаАмортизации.Комментарий 	= ДокОбъект.Комментарий;
		СтрокаАмортизации.АмортизацииБУ = СтрокаДанных.ДанныеФайла_НакопленнаяАмортизацияБУ;
		СтрокаАмортизации.АмортизацииНУ = СтрокаДанных.ДанныеФайла_НакопленнаяАмортизацияНУ;
		
		Попытка
			РежимЗаписи = ?(ДокОбъект.ЭтоНовый(), РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.ОтменаПроведения); 
			ДокОбъект.Записать(РежимЗаписи);
			
			СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
			СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
			СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.СтоимостьБУ;
			
			ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Активность = Истина;
			ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
			ЗаписьРегистра.СчетSAP = СчетSAP;
			ЗаписьРегистра.Записать(Истина);
		Исключение
			ДобавитьОшибку("Не удалось записать новый документ ввода начальных остатков по ОС", ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЦикла; 
	
	
	МассивСчетов = ТЗНакопленнойАмортизации.ВыгрузитьКолонку("СчетSAP");
	МассивСчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", КонтекстЗагрузки.ПостоянныеДанные.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаЗаписейРегистров.Ссылка,
	|	ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СчетSAP,
	|	КорректировкаЗаписейРегистров.Дата
	|ИЗ
	|	Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP КАК ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP
	|		ПО (КорректировкаЗаписейРегистров.Ссылка = ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков)
	|ГДЕ
	|	КорректировкаЗаписейРегистров.Дата = &Дата
	|	И КорректировкаЗаписейРегистров.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.ДокументВводаОстатков ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ДокументыКорректировки = Новый Соответствие; 
	Пока Выборка.Следующий() Цикл
		ДокументыКорректировки.Вставить(Выборка.СчетSAP, Выборка.Ссылка);	
	КонецЦикла; 
	
	Для каждого СчетSAP Из МассивСчетов Цикл
		
		ДокСсылка = ДокументыКорректировки.Получить(СчетSAP);
		Если ДокСсылка<>Неопределено Тогда
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Иначе 
			ДокОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		КонецЕсли;
		
		ДокОбъект.Дата 			= КонтекстЗагрузки.ПостоянныеДанные.Дата;
		ДокОбъект.Комментарий 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария, СчетSAP);
		ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДокОбъект.ГПН_Основание = ДокОбъект.Комментарий;
		
		ДокОбъект.ТаблицаРегистровНакопления.Очистить();
		ДокОбъект.ТаблицаРегистровСведений.Очистить();
		ДокОбъект.ТаблицаРегистровБухгалтерии.Очистить();
		ДокОбъект.ЗаполнениеДвижений.Очистить();
		
		//Накопления
		Регистр = Метаданные.РегистрыНакопления.СтоимостьНМАНалоговыйУчет;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровНакопления.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		Регистр = Метаданные.РегистрыНакопления.СтоимостьНМАБухгалтерскийУчет;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровНакопления.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		//бухгалтерские
		Регистр = Метаданные.РегистрыБухгалтерии.Хозрасчетный;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровБухгалтерии.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		Регистр = Метаданные.РегистрыБухгалтерии.Налоговый;
		СтрокаТЧ 				= ДокОбъект.ТаблицаРегистровБухгалтерии.Добавить();
		СтрокаТЧ.Имя 			= Регистр.Имя;
		СтрокаТЧ.Представление 	= Регистр.Синоним;
		
		ДокОбъект.Движения.СтоимостьНМАБухгалтерскийУчет.Очистить();
		ДокОбъект.Движения.СтоимостьНМАНалоговыйУчет.Очистить();
		ДокОбъект.Движения.Хозрасчетный.Очистить();
		ДокОбъект.Движения.Налоговый.Очистить();
		
		Данные = ТЗНакопленнойАмортизации.НайтиСтроки(Новый Структура("СчетSAP", СчетSAP)); 
		Для каждого СтрокаДанных Из Данные Цикл
			Если СтрокаДанных.АмортизацииБУ>0 Тогда
				//РН СтоимостьНМАБухгалтерскийУчет
				Движения = ДокОбъект.Движения.СтоимостьНМАБухгалтерскийУчет;
				СтрокаДвижений = Движения.ДобавитьПриход();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.НематериальныйАктив = СтрокаДанных.НМА;
				СтрокаДвижений.Амортизация = СтрокаДанных.АмортизацииБУ;
				
				//РБ Хозрасчетный
				Движения = ДокОбъект.Движения.Хозрасчетный;
				СтрокаДвижений = Движения.Добавить();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.СчетКт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов");
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "НематериальныеАктивы", СтрокаДанных.НМА);
				СтрокаДвижений.СчетДт = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Вспомогательный");
				СтрокаДвижений.Сумма = СтрокаДанных.АмортизацииБУ;
			КонецЕсли; 
			
			Если СтрокаДанных.АмортизацииНУ>0 Тогда
				//РН СтоимостьНМАНалоговыйУчет
				Движения = ДокОбъект.Движения.СтоимостьНМАНалоговыйУчет;
				СтрокаДвижений = Движения.ДобавитьПриход();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.НематериальныйАктив = СтрокаДанных.НМА;
				СтрокаДвижений.Амортизация = СтрокаДанных.АмортизацииНУ;
				
				//РБ Хозрасчетный
				Движения = ДокОбъект.Движения.Налоговый;
				СтрокаДвижений = Движения.Добавить();
				СтрокаДвижений.Активность = Истина;			
				СтрокаДвижений.Период = КонтекстЗагрузки.ПостоянныеДанные.Дата;
				СтрокаДвижений.Организация = КонтекстЗагрузки.ПостоянныеДанные.Организация;
				СтрокаДвижений.СчетКт = ПредопределенноеЗначение("ПланСчетов.Налоговый.АмортизацияНематериальныхАктивов");
				БухгалтерскийУчет.УстановитьСубконто(СтрокаДвижений.СчетКт, СтрокаДвижений.СубконтоКт, "НематериальныеАктивы", СтрокаДанных.НМА);
				СтрокаДвижений.Сумма = СтрокаДанных.АмортизацииБУ;
			КонецЕсли; 
			
		КонецЦикла; 
		
		ДокОбъект.Движения.СтоимостьНМАБухгалтерскийУчет.Записывать = Истина;
		ДокОбъект.Движения.СтоимостьНМАНалоговыйУчет.Записывать = Истина;
		ДокОбъект.Движения.Хозрасчетный.Записывать = Истина;
		ДокОбъект.Движения.Налоговый.Записывать = Истина;

		Попытка
			ДокОбъект.Записать();
			СтрокаЗагруженныхДокументов = ЗагруженныеДокументы.Добавить();
			СтрокаЗагруженныхДокументов.Документ = ДокОбъект.Ссылка;
			СтрокаЗагруженныхДокументов.ОбщаяСумма = ДокОбъект.Движения.Хозрасчетный.Итог("Сумма");
			
			ЗаписьРегистра = РегистрыСведений.ГПН_РезультатыЗагрузкиНачальныхОстатковИзSAP.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Активность = Истина;
			ЗаписьРегистра.ДокументВводаОстатков = ДокОбъект.Ссылка;
			ЗаписьРегистра.СчетSAP = СчетSAP;
			ЗаписьРегистра.Записать(Истина);
			
			ЗаполнитьАналитическийУчетКорректировки(ДокОбъект);
		Исключение
			ДобавитьОшибку("Не удалось записать новый документ корректировки записей регистров для курсовых разниц", ОписаниеОшибки());
			Возврат;
		КонецПопытки; 
	
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыФункции

//
//
Функция ПолучитьТаблицуДанных(КонтекстЗагрузки) Экспорт 
		
	ТаблицаExcel = ЗагрузитьМетодом_MSEXCEL(КонтекстЗагрузки.ИмяФайла, КонтекстЗагрузки.НомерСтраницы, КонтекстЗагрузки.СтрокаЗаголовков,
		КонтекстЗагрузки.НачальнаяСтрока, КонтекстЗагрузки.КонечнаяСтрока, 0);	
		
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	СоотвесвиеКолонок = Новый Структура;
	Для каждого Элемент Из КонтекстЗагрузки.СоответствиеКолонок Цикл
		ИмяКолонки = "ДанныеФайла_" + Элемент.Представление;
		Заголовок = Строка(Элемент.Значение) + ". " + Элемент.Представление;
		ИтоговаяТаблица.Колонки.Добавить(ИмяКолонки, , Заголовок);		
		
		ИмяКолонкиСырыхДанных = "N"+Элемент.Значение;
		Если ТаблицаExcel.Колонки.Найти(ИмяКолонкиСырыхДанных)<>Неопределено  Тогда
			СоотвесвиеКолонок.Вставить(ИмяКолонки, ИмяКолонкиСырыхДанных);	
		КонецЕсли; 
	КонецЦикла; 
	
	ИтоговаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",
													Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный)), "Номер строки", 4);

	
	Для каждого СтрокаДанных Из ТаблицаExcel Цикл
		СтрокаИтоговая = ИтоговаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИтоговая,СтрокаДанных, "НомерСтроки"); 
		Для каждого Колонка Из ИтоговаяТаблица.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			
			Если СоотвесвиеКолонок.Свойство(ИмяКолонки) Тогда
				СтрокаИтоговая[ИмяКолонки] = СтрокаДанных[СоотвесвиеКолонок[ИмяКолонки]];				
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ИтоговаяТаблица;
	
КонецФункции
 


Функция ТекстРазделителяЗапросовПакета()

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

//
//
Процедура СоздатьТаблицуОшибок() 
	
	Если ТаблицаОшибок<>Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Раздел");
	ТаблицаОшибок.Колонки.Добавить("Ошибка");
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",
												  Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный)));
	
КонецПроцедуры

//
//
Процедура ОчиститьТаблицуОшибок() 
	
	СоздатьТаблицуОшибок();
	ТаблицаОшибок.Очистить();
	
КонецПроцедуры
 
//
//
Процедура ДобавитьОшибку(Раздел, Ошибка, НомерСтроки=0) 
	
	СоздатьТаблицуОшибок();
	
	СтрокаОшибки = ТаблицаОшибок.Добавить();
	СтрокаОшибки.Раздел = Раздел;
	СтрокаОшибки.Ошибка = Ошибка;
	СтрокаОшибки.НомерСтроки = НомерСтроки;
		
КонецПроцедуры

//
//
Процедура ПостОбработкаТаблицыОшибок()
	
	Если ТаблицаОшибок=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаОшибок.Свернуть("Раздел, Ошибка, НомерСтроки");
	
КонецПроцедуры
 

//
//
Функция ЭтоСчетРасчетовВРублях(КодСчета1С) 
	
	ШаблонПоиска = "60.01,60.02,62.01,62.02,76.02,76.09.1";
	
	Возврат Найти(ШаблонПоиска, КодСчета1С)>0;
	
КонецФункции
 
//
//
Функция ЭтоСчетРасчетовУЕ(КодСчета1С) 
	
	ШаблонПоиска = "60.31,60.32,62.31,62.32,76.32,76.39";
	
	Возврат Найти(ШаблонПоиска, КодСчета1С)>0;
	
КонецФункции

//
//
Функция ЭтоСчетРасчетовВал(КодСчета1С) 
	
	ШаблонПоиска = "60.21,60.22,62.21,62.22,76.22,76.29";
	
	Возврат Найти(ШаблонПоиска, КодСчета1С)>0;
	
КонецФункции

Функция ЭтоСчетНДС_ТМЦ(КодСчета1С) 
	
	ШаблонПоиска = "19.03";
	
	Возврат Найти(ШаблонПоиска, КодСчета1С)>0;
	
КонецФункции

Функция ЭтоСчетНДС_Услуга(КодСчета1С) 
	
	ШаблонПоиска = "19.04";
	
	Возврат Найти(ШаблонПоиска, КодСчета1С)>0;
	
КонецФункции

Функция ЗагрузитьМетодом_MSEXCEL(Знач ФайлEXCEL, Знач НомерЛиста, Знач СтрокаЗаголовка = 0, НачСтрока = 2, КонСтрока = 0, КолвоСтрокEXCEL)
    Перем ИмяФайлаEXCEL, ИмяЛиста;
    Перем EXCELApplication, Book, Sheet;
    Перем ВсегоЛистов, НачальнаяКолонка, НачальнаяСтрока, КонечнаяКолонка, КонечнаяСтрока;
    Перем ДиапазонДанных, СтрокДиапазона, ДиапазонЗаголовка, МассивЗаголовка, МассивЗначений;
    Перем ТекИмя, ПозДоллар, Версия;
    Перем ТаблицаРезультат, МассивИменКолонок, ИмяКолонки, Колонка, Заголовок, НоваяСтрока, нСтроки;

    ИмяФайлаEXCEL = ПолучитьИмяФайлаБезРасширения(ФайлEXCEL);

    Попытка
        // Инициализация основного объекта EXCEL.Application: Открытие соединения.
        EXCELApplication = Новый COMОбъект("EXCEL.Application");
        EXCELApplication.Visible       = Ложь;
        EXCELApplication.DisplayAlerts = Ложь;
    Исключение
        Попытка
            EXCELApplication.Application.Quit();
        Исключение
        КонецПопытки;
        EXCELApplication = Неопределено;
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;  // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;

    // Определение версии EXCEL.
    Версия = Лев(EXCELApplication.Version,Найти(EXCELApplication.Version,".")-1);

    // Инициализация дочернего объекта типа Книга EXCEL.
    Book = EXCELApplication.WorkBooks.Open(ФайлEXCEL);
    ВсегоЛистов = Book.Sheets.Count;

    // Инициализация дочернего объекта Книги типа Лист EXCEL.
    Sheet = Book.WorkSheets(НомерЛиста);

    // Определение диапазона данных таблицы EXCEL.
    НачальнаяКолонка    = 1;
    НачальнаяСтрока     = 1;
    Если Версия = "8" Тогда
        КонечнаяКолонка = Sheet.Cells.CurrentRegion.Columns.Count;
        КонечнаяСтрока  = Sheet.Cells.CurrentRegion.Rows.Count;
    Иначе
        КонечнаяКолонка = Sheet.Cells.SpecialCells(11).Column;
        КонечнаяСтрока  = Sheet.Cells.SpecialCells(11).Row;
	Конецесли;
	
	//У них испочнены могут быть файлв, ограничим количество колонок 30-ю
	КонечнаяКолонка = ?(КонечнаяКолонка>50, 50, КонечнаяКолонка);
	
    // Параметр возвращаемый в вызывающую процедуру.
    КолвоСтрокEXCEL     = КонечнаяСтрока;

    // Проверка заполненности листа.
    Если КолвоСтрокEXCEL <= 1 И КонечнаяКолонка <= 1 Тогда
        КолвоСтрокEXCEL = 0;
        Сообщить(НСтр("ru = 'Лист номер " + НомерЛиста + ": Лист, содержащий 1 строку считаем пустым.'"), СтатусСообщения.Внимание);

        // Завершение работы.
        // Закрытие Объектов.
        Попытка
            Book.Close();
        Исключение
        КонецПопытки;
        Попытка
            EXCELApplication.Application.Quit();
        Исключение
        КонецПопытки;
        EXCELApplication = Неопределено;

        Возврат Новый ТаблицаЗначений;  // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;

    НачальнаяСтрока     = ?(НачСтрока = 0   , НачальнаяСтрока   , НачСтрока);
    КонечнаяСтрока      = ?(КонСтрока = 0   , КонечнаяСтрока    , КонСтрока);

    КонечнаяСтрока      = ?(КонечнаяСтрока > КолвоСтрокEXCEL, КолвоСтрокEXCEL, КонечнаяСтрока);
    НачальнаяСтрока     = ?(НачальнаяСтрока > КолвоСтрокEXCEL, КолвоСтрокEXCEL, НачальнаяСтрока);

    // Диапазон: Считываемые данные.
    ДиапазонДанных = Sheet.Range(Sheet.Cells(НачальнаяСтрока, НачальнаяКолонка), Sheet.Cells(КонечнаяСтрока, КонечнаяКолонка));
    СтрокДиапазона = ДиапазонДанных.Rows.Count;

    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;

    // Формирование колонок результирующей таблицы.

    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "Номер строки", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);

    МассивИменКолонок = Новый Массив;
    Для ит = 1 ПО КонечнаяКолонка Цикл

        ТекИмя = Строка(ит);
        МассивИменКолонок.Добавить(ТекИмя);

        Если ДиапазонДанных.Columns(ит).Hidden Тогда    // Скрытые колонки EXCEL пропустить.
            Продолжить;
        КонецЕсли;

        ИмяКолонки = "N" + ТекИмя;
        ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);

    КонецЦикла;

	Если СтрокаЗаголовка<>0 Тогда
		ДиапазонЗаголовка = Sheet.Range(Sheet.Cells(1, НачальнаяКолонка), Sheet.Cells(1, КонечнаяКолонка));
	    МассивЗаголовка = ДиапазонЗаголовка.Value.Выгрузить();

	    НоваяСтрока = ТаблицаРезультат.Добавить();
	    НоваяСтрока.НомерСтроки = 1;

	    ит = -1;
	    Для Каждого МассивЗначений ИЗ МассивЗаголовка Цикл

	        Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
	            ит = ит + 1;

	            ИмяКолонки = "N" + МассивИменКолонок[ит];
	            Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	            Если Колонка = Неопределено Тогда   // Имена скрытых колонок отсутствуют в массиве.
	                Продолжить;
	            КонецЕсли;

	            НоваяСтрока[ИмяКолонки] = СокрЛП(ЭлементМассива);
	        КонецЦикла;

	    КонецЦикла;
	КонецЕсли; 

    // ТаблицаРезультат: формирование строк по указанному диапазону: НачСтрока - КонСтрока.

    ДиапазонДанных = ДиапазонДанных.Value;

	нСтроки = НачальнаяСтрока-1;
	Для НомерСтроки = 1 ПО СтрокДиапазона Цикл
		
		нСтроки = нСтроки + 1;
		НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока.НомерСтроки = нСтроки;
		
		ПустаяСтрока = Истина;
		Для НомерКолонки = 1 ПО КонечнаяКолонка Цикл
			
			ИмяКолонки = "N" + МассивИменКолонок[НомерКолонки-1];
			Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
			Если Колонка = Неопределено Тогда   // Имена скрытых колонок отсутствуют в массиве.
				Продолжить;
			КонецЕсли;
			
			ЗначениеЯчейки = ДиапазонДанных.GetValue(НомерКолонки, НомерСтроки);            // Считывание данных в соответствии с их типом.
			
			//Если ЗначениеЯчейки = Неопределено Тогда
			//    ЗначениеЯчейки = ПрочитатьКартинку_MSEXCEL(EXCELApplication, Sheet, НомерКолонки, нСтроки, ИмяФайлаEXCEL, НомерЛиста, "УИД");
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				
				// Ширина колонки используется при формировании таблицы на форме обработки.
				ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
				ДлинаСтроки = СтрДлина(СокрЛП(ЗначениеЯчейки));
				ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
				
				НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
				ПустаяСтрока = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если ПустаяСтрока Тогда
			ТаблицаРезультат.Удалить(НоваяСтрока);
			Прервать;
		КонецЕсли; 
		
    КонецЦикла;

    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);

    // Завершение работы.
    // Закрытие Объектов.
    Попытка
        Book.Close();
    Исключение
    КонецПопытки;
    Попытка
        EXCELApplication.Application.Quit();
    Исключение
    КонецПопытки;
    EXCELApplication = Неопределено;

    Возврат ТаблицаРезультат;

КонецФункции

// Функция осуществляет экспорт изображения во внешний графический файл.
//
// Параметры:
//      EXCELApplication - Объект типа "EXCEL.Application".
//      Sheet - Обект типа "Лист книги EXCEL".
//      НомерКолонки - Номер колонки листа.
//      НомерСтроки - Номер строки листа.
//      ИмяФайлаEXCEL - Короткое имя файла без расширения, из которого производится импорт.
//      НомерЛиста - Номер листа книги EXCEL.
//      ПравилоИмяФайлаКартинки - правило формирования имени выходного графического файла.
//      - "УИД" (по умолчанию).
//      - Иначе на основании имени исходного файла EXCEL, Номера листа, Номера строки, Номера колонки.
//
// Возвращаемые значения:
//      ПолноеИмяФК - Полное имя графического файла.
//
Функция ПрочитатьКартинку_MSEXCEL(Знач EXCELApplication, Знач Sheet, Знач НомерКолонки, Знач НомерСтроки, Знач ИмяФайлаEXCEL, Знач НомерЛиста, Знач ПравилоИмяФайлаКартинки = "УИД")
    Перем GraphicObject, Chart;
    Перем ПолноеИмяФК, ФайлКартинки;

    Если Sheet.Shapes.Count() = 0 Тогда
        Возврат Неопределено;
    КонецЕсли;

    Для Каждого GraphicObject ИЗ Sheet.Shapes Цикл
        Если GraphicObject.Type = 13 И GraphicObject.TopLeftCell.Column = НомерКолонки И GraphicObject.TopLeftCell.Row = НомерСтроки Тогда

            // GraphicObject.Name.
            Если ПравилоИмяФайлаКартинки = "УИД" Тогда
                ПолноеИмяФК = КаталогВременныхФайлов() + Новый УникальныйИдентификатор() + ".jpg";
            Иначе
                ПолноеИмяФК = КаталогВременныхФайлов() + ИмяФайлаEXCEL + "Л" + НомерЛиста + "С" + НомерСтроки + "К" + НомерКолонки + ".jpg";
            КонецЕсли;

            Попытка
                GraphicObject.ScaleHeight(1,1);     // Истинный размер по высоте.
                GraphicObject.ScaleWidth(1,1);      // Истинный размер по ширине.
                GraphicObject.Copy();

                Chart = EXCELApplication.ActiveSheet.ChartObjects().Add(0, 0, GraphicObject.Width, GraphicObject.Height).Chart();
                Chart.Paste();
                Chart.Export(ПолноеИмяФК);

                Chart = Неопределено;

                ФайлКартинки = Новый Файл(ПолноеИмяФК);
                Если ФайлКартинки.Существует() Тогда
                    Возврат ПолноеИмяФК;
                Иначе
                    Сообщить("Не удалось экспортировать картинку из строки " + НомерСтроки + " колонки " + НомерКолонки + " в " + ПолноеИмяФК);
                    Возврат Неопределено;
                КонецЕсли;
            Исключение
                Сообщить(ОписаниеОшибки());
                Сообщить("Не удалось экспортировать картинку из строки " + НомерСтроки + " колонки " + НомерКолонки + " в " + ПолноеИмяФК);
                Возврат Неопределено;
            КонецПопытки;

        КонецЕсли;
    КонецЦикла;

    Возврат Неопределено;

КонецФункции

Процедура УдалитьКолонкиСНулевойШириной(ТаблицаРезультат)
    Перем МассивПустыхКолонок;

    // Найдем пустые колонки.
    МассивПустыхКолонок = Новый Массив;
    Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
        Если Колонка.Ширина = 0 Тогда
            МассивПустыхКолонок.Добавить(Колонка.Имя);
        КонецЕсли;
    КонецЦикла;

    // Удалим пустые колонки.
    Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
        ТаблицаРезультат.Колонки.Удалить(ПустаяКолонка);
    КонецЦикла;

КонецПроцедуры

// Выделяет из полного имени файла имя файла без расширения.
//
// Параметры
//  ПолноеИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   ИмяФайлаБезРасширения – короткое имя файла.
//
Функция ПолучитьИмяФайлаБезРасширения(ПолноеИмяФайла)
    Перем ФайлТМП, РасширениеФайла, ИмяФайлаБезРасширения;

    ФайлТМП = РазложитьСтрокуВМассивПодстрок(ПолноеИмяФайла, "\");
    ФайлТМП = ФайлТМП[ФайлТМП.Количество()-1];
    РасширениеФайла  = "." + ПолучитьРасширениеИмениФайла(ФайлТМП);
    ИмяФайлаБезРасширения = СтрЗаменить(ФайлТМП, РасширениеФайла, "");

    Возврат ИмяФайлаБезРасширения;

КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла)
    Перем Расширение;

    Расширение = ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, ".");
    Возврат Расширение;

КонецФункции

// Удаляет кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
//
Функция УдалитьКавычки(Знач Строка, Кавычка = """")

    Пока Лев(Строка, 1) = Кавычка Цикл
        Строка = Сред(Строка, 2);
    КонецЦикла;

    Пока Прав(Строка, 1) = Кавычка Цикл
        Строка = Лев(Строка, СтрДлина(Строка) - 1);
    КонецЦикла;

    Возврат Строка;

КонецФункции

// Удаляет из строки указанное количество символов справа.
//
// Параметры:
//  Текст         - Строка - строка, в которой необходимо удалить последние символы;
//  ЧислоСимволов - Число  - количество удаляемых символов.
//
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)

    Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);

КонецПроцедуры

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")

    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока 1 = 1 Цикл
            Поз = Найти(Стр, Разделитель);
            Если Поз = 0 Тогда
                МассивСтрок.Добавить(СокрЛП(Стр));
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(СокрЛП(Лев(Стр, Поз - 1)));
            Стр = СокрЛ(Сред(Стр, Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока 1 = 1 Цикл
            Поз = Найти(Стр, Разделитель);
            Если Поз = 0 Тогда
                Если (СокрЛП(Стр) <> "") Тогда
                    МассивСтрок.Добавить(СокрЛП(Стр));
                КонецЕсли;
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(СокрЛП(Лев(Стр,Поз - 1)));
            Стр = Сред(Стр, Поз + ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;

КонецФункции

// Функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)

    ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
    Пока ПозицияСимвола >= 1 Цикл
        Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
            Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1);
        КонецЕсли;
        ПозицияСимвола = ПозицияСимвола - 1;
    КонецЦикла;

    Возврат "";

КонецФункции

//
//
Функция УдалитьПробелы(ЗначениеСтрока) 
	
	Результат = СтрЗаменить(Строка(ЗначениеСтрока), " ", "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	Возврат Результат;
	
КонецФункции


//
//
Функция СформироватьПротоколОшибок() Экспорт 
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = ПолучитьМакет("МакетПротоколаОбОшибках");
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
	Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ТаблицаОшибокОбщих = ТаблицаОшибок.Скопировать(ТаблицаОшибок.НайтиСтроки(Новый Структура("НомерСтроки", 0)));
	НаборыДанных = Новый Структура("ТаблицаОшибок", ТаблицаОшибокОбщих);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,НаборыДанных,
	ДанныеРасшифровки);
	
	ТабДок = Новый ТабличныйДокумент;
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТабДок;
	
КонецФункции

//
//
Процедура ЗаполнитьАналитическийУчетКорректировки(КорректировкаОбъект) 
	
	Движения = КорректировкаОбъект.Движения;
	
	Движения.ГПН_Аналитический.Записывать = Истина;
	Движения.ГПН_Аналитический.Очистить();	
	
	НаборЗаписейБУ = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписейБУ.Отбор.Регистратор.Значение = КорректировкаОбъект.Ссылка;
	НаборЗаписейБУ.Прочитать();
	
	Если НаборЗаписейБУ.Количество() = 0 Тогда
		НаборЗаписейБУ = ЭтотОбъект.Движения.Хозрасчетный;
	КонецЕсли;
	
	Для Каждого ПроводкаБУ Из НаборЗаписейБУ Цикл
		ГПН_АналитическийУчет.ЗаполнитьЗначенияПроводкиУУнаОсновеБУ(ПроводкаБУ, Движения.ГПН_Аналитический);	
	КонецЦикла;
	
	Движения.ГПН_Аналитический.Записать();
	
КонецПроцедуры
 

// Получение списка листов файла типа XLSX средствами 1С (ЧтениеXML).
//
Функция ФайлExcelПолучитьСписокЛистов_1CXML_XLSX(ФайлEXCEL) Экспорт
	Перем ZIPКаталог, WorkBook;
	Перем СписокЛистов;
	ZIPКаталог = КаталогВременныхФайлов() + "XLSX\";
	СписокЛистов = Новый СписокЗначений;
	Файл = ПолучитьОбъектФайл(ФайлEXCEL, Истина);
	Если Файл = Неопределено Тогда
		Сообщить("Невозможно получить список листов, т.к. невозможно открыть для чтения файл:
		|" + ФайлEXCEL);
		Возврат Новый СписокЗначений;
	КонецЕсли;
	Если НЕ ВРег(Файл.Расширение) = ".XLSX" Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	WorkBook = Новый ЧтениеXML;
	WorkBook.ОткрытьФайл(ZIPКаталог + "XL\WorkBook.xml");
	// Считать очередной узел XML.
	Пока WorkBook.Прочитать() Цикл
		Если НЕ ВРег(WorkBook.Имя) = ВРег("sheet") Тогда
			Продолжить;
		КонецЕсли;
		// Тип текущего узла XML.
		Если WorkBook.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			// Считать очередной атрибут элемента XML.
			Пока WorkBook.ПрочитатьАтрибут() Цикл
				Если НЕ ВРег(WorkBook.Имя) = "NAME" Тогда
					Продолжить;
				КонецЕсли;
				НомерЛиста = СписокЛистов.Количество()+1;
				СписокЛистов.Добавить(Строка(НомерЛиста) + ". " + WorkBook.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	// Завершение работы.
	// Закрытие Объектов.
	WorkBook.Закрыть();
	Возврат СписокЛистов;
КонецФункции

Функция ПолучитьОбъектФайл(Знач ФайлEXCEL, РаспаковатьXLSX = Ложь)
	Перем Файл, objFSO, objFile, XLSXРаспакован;
	Если НЕ ЗначениеЗаполнено(ФайлEXCEL) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Файл = Новый Файл(ФайлEXCEL);
	Если НЕ Файл.Существует() Тогда
		Сообщить("Файл не существует:
		|" + ФайлEXCEL);
		Возврат Неопределено;
	КонецЕсли;
	// Проверка: Занят ли файл другим процессом?
	objFSO = Новый COMОбъект("Scripting.FileSystemObject");
	Попытка
		objFSO.MoveFile(ФайлEXCEL, ФайлEXCEL);
		objFile = objFSO.GetFile(ФайлEXCEL);
	Исключение
		objFile = Неопределено;
		objFSO = Неопределено;
		Сообщить("Ошибка открытия файла/Файл занят другой программой:
		|" + ФайлEXCEL);
		Возврат Неопределено;
	КонецПопытки;
	objFSO = Неопределено;
	Если ВРег(Файл.Расширение) = ".XLSX" И РаспаковатьXLSX Тогда
		// Распаковка файла XLSX во временный каталог.
		XLSXРаспакован = РаспаковатьXLSXвКаталогВременныхФайлов(ФайлEXCEL);
		Если НЕ XLSXРаспакован Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат Файл;
КонецФункции

Функция РаспаковатьXLSXвКаталогВременныхФайлов(ФайлEXCEL)
	Перем ZIPФайл, ZIPКаталог;
	ZIPКаталог = КаталогВременныхФайлов() + "XLSX\";
	Попытка
		УдалитьФайлы(ZIPКаталог);
		ZIPФайл = Новый ЧтениеZipФайла;
		ZIPФайл.Открыть(ФайлEXCEL);
		ZIPФайл.ИзвлечьВсе(ZIPКаталог, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция СтрокаВЧисло(Знач ЗначениеСтрокой, НомерСтроки=0) 
	
	ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, " ", ""); 
	ЗначениеСтрокой = СтрЗаменить(ЗначениеСтрокой, ",", "."); 
	Попытка
		Значение = Число(ЗначениеСтрокой);
	Исключение
		ДобавитьОшибку("Не удалось преобразовать строку в число", ЗначениеСтрокой, НомерСтроки); 
	    Значение=Неопределено;
	КонецПопытки; 
	
	Возврат Значение;
	
КонецФункции

//
//
Функция ПривестиКодНоменклатуры(Знач КодНоменклатуры)
	
	Если Не ТипЗнч(КодНоменклатуры)=Тип("Строка") Тогда
		ВызватьИсключение НСтр("ru = 'Код номенклатуры переданный к преобразованию не верного типа, должна быть строка'"); 
	КонецЕсли; 
	
	ДлинаКодаНоменклатуры = 30;
	
	
	ШагТочки = 2;	
	ЧислоЧастей = СтрДлина(КодНоменклатуры)/ШагТочки;
	ЧислоЧастей = ?(ЧислоЧастей>Цел(ЧислоЧастей), Цел(ЧислоЧастей)+1, ЧислоЧастей); 
	
	КоличествоТочек = 8;
	КодВБазе = "";
	Для НомерЧасти=0 По КоличествоТочек-1 Цикл
		Если НомерЧасти<ЧислоЧастей Тогда
			Часть = Сред(КодНоменклатуры, 1+2*НомерЧасти, 2);
			Часть = ?(СтрДлина(Часть)=1, Часть+" ", Часть);
		Иначе 
			Часть = "  ";
		КонецЕсли; 
		КодВБазе = КодВБазе + Часть + "."; 
	КонецЦикла;
	
	//Добавим остаток номера
	КодВБазе = КодВБазе +  Сред(КодНоменклатуры, КоличествоТочек*3);
	
	РазницаВДлинеКода = ДлинаКодаНоменклатуры - СтрДлина(КодВБазе);
	Если РазницаВДлинеКода<0 Тогда
		КодВБазе = Сред(КодВБазе, 1, ДлинаКодаНоменклатуры);
	Иначе 
		Для Итер=1 ПО РазницаВДлинеКода Цикл
			КодВБазе = КодВБазе + " ";
		КонецЦикла;  
	КонецЕсли; 
		
	Возврат КодВБазе;
	
КонецФункции
 

//
//
Функция УдалитьЛидируюшиеНули(Знач Номер) 
	
	Номер = Строка(Номер);
	Номер = СокрЛП(Номер);
	
	Длина = СтрДлина(Номер);
	Для к = 1 по Длина Цикл
		Если Сред(Номер, к, 1) <> "0" Тогда
			Номер = Сред(Номер, к);
			прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Номер;
	
КонецФункции
 
#КонецОбласти 